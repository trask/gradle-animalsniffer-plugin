{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to gradle animalsniffer plugin","text":"<p>Use AnimalSniffer signatures to check (JDK, android SDK or any library) API compatibility  for java (kotlin, scala, groovy etc.), android and kotlin multiplatform projects.</p> <p>Release notes - History - Compatibility - License</p> <p>Used by:</p> <ul> <li>Mockito for java and android compatibility checks</li> <li>Okhttp for java and android compatibility checks (using kotlin multiplatform)</li> <li>Open-telemetry  for android compatibility checks (with custom (gammy-bears based) signatures generation)</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>Initially, AnimalSniffer was created to check compatibility with lower Java versions (to prevent situations when newer API methods called).</p> <p>But it's a general tool: signatures could be created for any library to check api compatibility against older library versions. For example, android community adopted it for android SDK compatibility verification.</p> <p>Easy way to check android SDK compatibility for java library.</p> <p>JDK signatures for java 9 and above</p> <p>JDK 9+ signatures are not published due to module nature: use --release flag instead of plugin</p> <pre><code>compileJava {\n  options.release = 11\n}\n</code></pre> <p>Use plugin for java 8 and before checks, for android or any other library signatures verification.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Works with:<ul> <li>Java (and related) plugins: java (java-library), kotlin, groovy (only with <code>@CompileStatic</code>), scala,    or any other jvm language (which plugin use sourceSets)</li> <li>Android projects (library and application plugins)</li> <li>Kotlin multiplatform projects</li> </ul> </li> <li>Could create signatures for your or any 3<sup>rd</sup> party    library (to check compatibility against the older library version)</li> <li>Special task to view signature file contents</li> <li>Report errors to console (to simplify reaction), text file and CSV (for external tools)</li> <li>Could merge existing signatures (e.g. for caching)</li> <li>Compatible with gradle configuration cache (gradle 9+ requirement)</li> <li>Debug tools to learn or check configuration</li> </ul>"},{"location":"#example-projects","title":"Example projects","text":"<p>Check:</p> <ul> <li>Java (including android signatures)</li> <li>Groovy</li> <li>Kotlin</li> <li>Scala</li> <li>Android library</li> <li>Android application</li> <li>Multiplatform</li> <li>Multiplatform + android</li> </ul> <p>Signature build:</p> <ul> <li>Classes - signature from project classes</li> <li>Jars - signature from project jars (configuration)</li> <li>Signatures - signature from other signatures</li> <li>Mixed - signature from different sources</li> </ul> <p>Full android and multiplatform projects (created with android studio and kotlin init site):</p> <ul> <li>Android - complete android project</li> <li>Multiplatform: android only - 1 multiplatform target</li> <li>Multiplatform: android, desktop, server - several multiplatform targets</li> <li>Multiplatform: desktop, server - 2 targets, without android</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'ru.vyarus:gradle-animalsniffer-plugin:2.0.1'\n    }\n}\napply plugin: 'ru.vyarus.animalsniffer'\n</code></pre> <p>OR</p> <pre><code>plugins {\n    id 'ru.vyarus.animalsniffer' version '2.0.1'\n}\n</code></pre> <p>Plugin only works with plugins:</p> <ul> <li>Jvm languages: <code>java</code> plugin (activated by any java-related plugin like <code>java</code>, <code>java-library</code>, <code>groovy</code>, <code>scala</code>, <code>org.jetbrains.kotlin.jvm</code>, etc.).</li> <li>Android: <code>com.android.library</code> or <code>com.android.application</code> plugins (required <code>7.4.0</code> or greater)</li> <li>Kotlin Multiplatform: <code>org.jetbrains.kotlin.multiplatform</code> plugin (required <code>1.7</code> or greater). </li> </ul> <p>Gradle compatibility matrix</p>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>Plugin creates animalsniffer tasks for project sources and assigns them as  a <code>check</code> tasks dependencies, so animalsniffer checks would execute on each build.</p>"},{"location":"getting-started/#signatures","title":"Signatures","text":"<p>AnimalSniffer requires a signature file to check against. To define a signature (or multiple signatures), use the <code>signature</code> configuration.</p> <p>Note</p> <p>When no signatures defined animalsniffer check tasks will fail. This is important to catch common configuration error when signature declared without \"@signature\" qualifier (was often treated as successful execution).</p>"},{"location":"getting-started/#jdk-compatibility","title":"JDK compatibility","text":"<p>Use java signatures to check older JDK &lt;9 API compatibility.  For example, java 6 compatibility: </p> <pre><code>repositories { mavenCentral() }\ndependencies {\n    signature 'org.codehaus.mojo.signature:java16:1.1@signature'\n}\n</code></pre> <p>Java signatures</p> <p>JDK signatures for java 9 and above</p> <p>JDK 9+ signatures are not published:</p> <pre><code>Starting with JDK9+ you can't define a full API signature cause based on the module system you can define your own (limited view on JDK). Apart from that you can use the release configuration in maven-compiler-plugin with JDK9+ to have exactly what animal sniffer offers and that's the reason why there are no JDK9+ signatures.\n</code></pre> <p>To check JDK 9+ compatibility use --release flag instead of plugin (or build signatures manually with maven plugin):</p> <pre><code>compileJava {\n  options.release = 11\n}\n</code></pre>"},{"location":"getting-started/#android-compatibility","title":"Android compatibility","text":"<p>To check Android API compatibility (for java library or android project):</p> <pre><code>repositories { mavenCentral() }\ndependencies {\n    signature 'net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature'\n}\n</code></pre> <p>Android signatures (alternative: gummy bears (D8 sugar) signatures list)</p>"},{"location":"getting-started/#jdk-and-android-compatibility","title":"JDK and Android compatibility","text":"<p>To check both Java version and Android compatibility, configure both signatures:</p> <pre><code>dependencies {\n    signature 'org.codehaus.mojo.signature:java16:1.1@signature'\n    signature 'net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature'\n}\n</code></pre> <p>In this case, animalsniffer will run 2 times: for each signature. You may see the same errors two times if a class/method is absent in both signatures. Each error message in the log (and file) will also contain the signature name to avoid confusion.</p>"},{"location":"getting-started/#custom-signatures","title":"Custom signatures","text":"<p>You can also create signatures for any 3<sup>rd</sup> party library (dependency) to  check version compatibility.</p> <p>Or build signatures, generated in your project (from project classes) </p> <p>Tip</p> <p>Signature contents could be viewed with a special task.</p> <p>You can merge and reduce existing signatures to optimize check time.</p>"},{"location":"getting-started/#default-checks","title":"Default checks","text":"<p>Animalsniffer tasks created for each \"source set\" (including tests). By default, tasks for test sources are disabled - so only \"main\" sources are checked with the build.</p> <ul> <li>For java projects tasks created per source set</li> <li>For android project tasks created per android component (variant and test components),</li> <li>For kotlin multiplatform tasks created per platform compilation (excluding metadata).</li> </ul> <p>Tip</p> <p>Use tasks debug and debug option to learn and debug animalsniffer tasks configuration.</p> <p>Note</p> <p>Even if animalsniffer task is not assigned to <code>check</code> task, you can always call it directly (animalsniffer tasks are always created for all sources).</p>"},{"location":"getting-started/#configure-default-tasks","title":"Configure default tasks","text":"<p>By default, all animalsniffer tasks are assigned to the <code>check</code> task (except  tasks for test sources). To exclude animalsniffer tasks from  dependency, use <code>defaultTargets</code> option: just specify required target names (source set, android variant or kotlin compilation)</p> <p>Null option value (<code>defaultTargets = null</code>) means all non-test tasks would be default (defaul value). Empty value (<code>defaultTargets = []</code>) means no default tasks.</p> <p>See java, android or multiplatform configuration guides for examples.</p> <p>Important</p> <p>Old <code>animalsniffer.sourceSets</code> option still exists and would also work, but new configuration supersedes it (new property unifies configuration for all project types). </p> <p>It is rarely required, but test checks could be enabled with:</p> <pre><code>animalsniffer {\n    checkTestSources = true\n}\n</code></pre>"},{"location":"getting-started/#output","title":"Output","text":"<p>Violations are always printed to console. Example output:</p> <pre><code>2 AnimalSniffer violations were found in 1 files. See the report at: file:///myproject/build/reports/animalsniffer/main.text\n\n[Undefined reference] invalid.(Sample.java:9)\n  &gt;&gt; int Boolean.compare(boolean, boolean)\n\n[Undefined reference] invalid.(Sample.java:14)\n  &gt;&gt; java.nio.file.Path java.nio.file.Paths.get(String, String[])\n</code></pre> <p>There are also text and CSV reports, enabled by default.</p>"},{"location":"getting-started/#suppress-violations","title":"Suppress violations","text":"<p>A special annotation could be used to suppress violations</p>"},{"location":"about/compatibility/","title":"Gradle compatibility","text":"<p>The plugin is compiled for Java 8 and tested for compatibility with Java 11, 17 and 21.</p> Gradle Version 7-8 2.0.1 5 1.7.2 4.x 1.4.6"},{"location":"about/history/","title":"Version history","text":""},{"location":"about/history/#201-2025-04-29","title":"2.0.1 (2025-04-29)","text":"<ul> <li>Detect java support by <code>java</code> plugin presence instead of <code>java-base</code>.   Required to avoid duplicate tasks registration when kotlin-multiplatform plugin registered after animalsniffer (#116)</li> </ul>"},{"location":"about/history/#200-2025-01-25","title":"2.0.0 (2025-01-25)","text":"<ul> <li>(breaking) Drop gradle 5 and 6 support</li> <li>(breaking) Fail check when no signatures declared (required to catch early configuration errors)</li> <li>Now additional configuration required when only build signature tasks used (to disable check)</li> <li>Add failWithoutSignatures option (true by default). Set to false for legacy behavior</li> <li>Add android projects support (activates for android library and application plugins   and use variant components (debug, release and test) instead of source sets).</li> <li>Add kotlin multiplatform projects support (tasks created for each platform compilation, except metadata (common))</li> <li>Improve debug:</li> <li>Add printAnimalsnifferSourceInfo task for debug purposes (shows registered source sets, tasks, plugins)</li> <li>Add printAnimalsnifferTasks task to print info about all registered tasks</li> <li>Put all animalsniffer tasks under 'animalsniffer' group</li> <li>Rename signature cache tasks to differentiate with check tasks (cache tasks starts with 'cache' keyword)</li> <li>change cache tasks output path: /animalsniffer/cache/[checkTargetName]/[checkTaskName]Cache.sig</li> <li>Change default tasks selection (tasks applied as dependency to the check task):</li> <li>Add checkTestSources = false option to avoid tests sources checks by default</li> <li>Add defaultTargets = [] (strings) option to limit default animalsniffer tasks.</li> <li>Legacy sourceSets option still supported, but checkTestSources and defaultTargets override it</li> <li>Add CSV report: used internally for building console and text reports, but could be   used by an external tool to collect errors</li> <li>Change field references in reports (when animalsniffer identifies field):   before was \"fieldName field\", now only \"#fieldName\"</li> <li>Add new properties to AnimalSniffer task to simplify detailed configuration:</li> <li>targetType: type of task (SourceSet, MultiplatformTarget, AndroidVariant)</li> <li>targetName: name of target (used in animalsniffer task name)</li> <li>Call animalsniffer directly instead of ant tasks</li> <li>Configuration cache compatibility</li> </ul>"},{"location":"about/history/#172-2024-11-18","title":"1.7.2 (2024-11-18)","text":"<ul> <li>Update animalsniffer 1.23 -&gt; 1.24</li> <li>Fix gradle 8.11 support (#100)</li> <li>Fix file report disabling</li> <li>Add AnimalSniffer task shortcut for simpler reports configuration</li> </ul>"},{"location":"about/history/#171-2023-07-05","title":"1.7.1 (2023-07-05)","text":"<ul> <li>Update animalsniffer 1.22 -&gt; 1.23</li> <li>Plugin requires now JavaBasePlugin instead of JavaPlugin.   Required for kotlin multiplatform 1.9.20 activating only base plugin with jvm().withJava() (#84)</li> </ul> <p>NOTE: animalsniffer 1.23 reports problems on fields without line number (but with field name), Plugin output would contain line 1 (default for not defined line)</p>"},{"location":"about/history/#170-2023-02-09","title":"1.7.0 (2023-02-09)","text":"<ul> <li>Support animalsniffer messages for field violations (#25)</li> <li>Always put line number in file report, even if it wasn't declared (consistency with console reporting)</li> <li>Fix gradle deprecation warning (#67)</li> <li>Skip check task when no signatures configured or no files to check (to differentiate with success execution   and easily spot configuration problems)</li> <li>Add custom task shortcuts: allow custom build signature and signature info tasks declaration without task package</li> <li>Add debug output for check and build tasks (to simplify configuration debugging)<ul> <li>animalsniffer.debug = true for check tasks</li> <li>animalsnifferSignature.debug = true for signature build task</li> </ul> </li> </ul>"},{"location":"about/history/#160-2022-08-20","title":"1.6.0 (2022-08-20)","text":"<ul> <li>Update animalsniffer 1.20 -&gt; 1.22 (java 9 support)</li> <li>Fix configuration cache support for check tasks (#26)<ul> <li>Type of sourcesDirs property of AnimalSniffer tasks changed, but it should not be a problem</li> </ul> </li> <li>Fix formatting messages without source line number</li> <li>Remove duplicate animalsniffer messages without line number</li> </ul>"},{"location":"about/history/#154-2021-11-06","title":"1.5.4 (2021-11-06)","text":"<ul> <li>Fix gradle 7 deprecation warnings</li> </ul>"},{"location":"about/history/#153-2021-02-18","title":"1.5.3 (2021-02-18)","text":"<ul> <li>Update animalsniffer 1.18 -&gt; 1.20 (asm 9; java 8 minimum)</li> </ul>"},{"location":"about/history/#152-2020-11-05","title":"1.5.2 (2020-11-05)","text":"<ul> <li>Fix inner/anonymous classes check order: enclosing class must be processed first   to correctly apply ignoring annotation (#25)</li> <li>Fix source link recognition in IDEA console when multiple signatures used:   changed \"[Undefined reference (signature)]\" to \"[Undefined reference | signature]\".</li> </ul>"},{"location":"about/history/#151-2020-06-06","title":"1.5.1 (2020-06-06)","text":"<ul> <li>Update animalsniffer 1.16 -&gt; 1.18 (support java &gt; 8)</li> </ul>"},{"location":"about/history/#150-2019-02-05","title":"1.5.0 (2019-02-05)","text":"<ul> <li>(breaking) Gradle 5 compatibility. Plugin now requires gradle 5.x due to gradle api changes (#12)</li> </ul>"},{"location":"about/history/#146-2018-08-27","title":"1.4.6 (2018-08-27)","text":"<ul> <li>Fix build cache support for relocated project (use relative paths for cache keys) (#10).   Affects CI builds caching when project checked out into different directories</li> </ul>"},{"location":"about/history/#145-2018-07-22","title":"1.4.5 (2018-07-22)","text":"<ul> <li>Fix maven central and jcenter artifacts (missed dependency)</li> </ul>"},{"location":"about/history/#144-2018-07-13","title":"1.4.4 (2018-07-13)","text":"<ul> <li>Fix ant task errors propagation (errors was silently hidden)</li> <li>Fix support for classes with lambdas (retrolambda plugin compatibility) (#7)</li> </ul>"},{"location":"about/history/#143-2017-12-06","title":"1.4.3 (2017-12-06)","text":"<ul> <li>Fix warnings recognition for parallel builds (#3)</li> </ul>"},{"location":"about/history/#142-2017-08-24","title":"1.4.2 (2017-08-24)","text":"<ul> <li>Update animalsniffer 1.15 -&gt; 1.16</li> <li>Remove error duplicates after method return type detection (introduced in 1.16)   For example, code line <code>Paths.get ( \" / tmp \" );</code> produce 2 errors:   unknown return type (java.nio.file.Path), unknown method (java.nio.file.Path java.nio.file.Paths.get(String, String[]))   (note, in 1.15 only second error was shown).   To avoid such duplicates, plugin will remove first error (check that current error starts with previous error).</li> </ul>"},{"location":"about/history/#141-2017-07-30","title":"1.4.1 (2017-07-30)","text":"<ul> <li>(breaking) Fix Gradle 4 compatibility for build signature task (due to new gradle outputs resolution restriction):<ul> <li>Now task use output directory instead of output files, so <code>task.outputs.files</code> can't be used (will return just output directory)   Use new <code>task.outputFiles</code> method instead (it will also grant dependency on signature task, the same way as outputs do).</li> <li>Separate output directory used for each task to avoid collisions: <code>build/animalsniffer/$taskName</code>   For project signature (configured with animalsnifferSignature configuration), output directory would be   <code>build/animalsniffer/signature/</code>. For cache tasks, animalsniffer prefix cut off from task name:   <code>build/animalsniffer/cacheMain/</code>.</li> </ul> </li> </ul>"},{"location":"about/history/#140-2017-07-18","title":"1.4.0 (2017-07-18)","text":"<ul> <li>Add build signature task and animalsnifferSignature configuration closure</li> <li>(breaking) Plugin must be applied after java (groovy) plugin, otherwise it will do nothing</li> <li>Add signature name to error message when multiple signatures used for check (for better context identification)</li> <li>Add caching mode (for check task): when enabled, extra task added for each source set to compose all provided signatures and jars   into new project-specific signature.<ul> <li>Speed up subsequent animalsniffer check runs for large classpaths (because of no need to re-read all jars all the   time and ability to use smaller signature for checks). Extremely helpful for gradle plugin projects.</li> <li>Merge multiple signatures into one (rare case, when 3<sup>rd</sup> party libraries provide signatures and they must be merged with jdk signature)</li> </ul> </li> <li>Add cache configuration options <code>animalsniffer.cache</code> closure:<ul> <li>enabled - to enable cache tasks usage with check tasks (for advanced caching)</li> <li>exclude - to exclude not used packages from generated signature and speed up check task   (by default, 'sun.*' and repackaged gradle dependencies packages are excluded)</li> <li>mergeSignatures - to enable signatures merge (no merge, by default because case is rare)</li> </ul> </li> <li>Add <code>animalsniffer</code> configuration options (to simplify small signatures usage):<ul> <li>excludeJars - to be able to exclude jars from check classpath (because library signatures should be used instead)</li> <li>signatures - to be able to directly specify signatures for check (e.g. from custom location or output from other task)</li> </ul> </li> <li>Add SignatureInfoTask to analyze signature (to be able to reduce signature size and speed-up check)</li> </ul>"},{"location":"about/history/#130-2017-03-20","title":"1.3.0 (2017-03-20)","text":"<ul> <li>Prevent other tasks output interception (#3)</li> <li>Change console reporting format (to match gradle-quality-plugin format):<ul> <li>Each error split to source and code lines followed by empty line</li> <li>IDE will be able to show link for class reference (clickable) when line number available</li> </ul> </li> <li>Add ignored classes configuration: extra allowed classes not present in signature</li> </ul>"},{"location":"about/history/#120-2016-08-27","title":"1.2.0 (2016-08-27)","text":"<ul> <li>Gradle 3.0 compatibility</li> </ul>"},{"location":"about/history/#110-2016-06-15","title":"1.1.0 (2016-06-15)","text":"<ul> <li>Gradle 2.14 compatibility</li> <li>BREAKING: incompatible with old gradle versions (requires gradle &gt;= 2.14).   When used with older version raise compatibility error to avoid confusion.</li> </ul>"},{"location":"about/history/#101-2016-03-30","title":"1.0.1 (2016-03-30)","text":"<ul> <li>Update animalsniffer 1.14 -&gt; 1.15 (fixes NPE bug)</li> </ul>"},{"location":"about/history/#100-2015-12-20","title":"1.0.0 (2015-12-20)","text":"<ul> <li>Initial release</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright \u00a9 2015-2025, Vyacheslav Rusakov</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/release-notes/","title":"2.0.0 Release notes","text":""},{"location":"about/release-notes/#breaking-require-gradle-7-or-above","title":"(breaking) Require gradle 7 or above","text":"<p>Dropped support for gradle 5 and 6</p>"},{"location":"about/release-notes/#breaking-check-fails-without-signatures","title":"(breaking) Check fails without signatures","text":"<p>Before, animalsniffer check task was skipped when no signatures declared. Now it would fail. This was done to catch quite a common configuration error: absence of \"signature\" qualifier</p> <p>wrong: <pre><code>dependencies {\n    signature 'org.codehaus.mojo.signature:java16:1.1'\n}\n</code></pre></p> <p>correct: <pre><code>dependencies {\n    signature 'org.codehaus.mojo.signature:java16:1.1@signature'\n}\n</code></pre></p> <p>With old behavior, it was hard to detect incorrect configuration.</p>"},{"location":"about/release-notes/#old-no-signatures-behavior","title":"Old no-signatures behavior","text":"<p>Old behavior could be reverted with the new option:</p> <pre><code>animalsniffer {\n    failWithoutSignatures = false\n}\n</code></pre>"},{"location":"about/release-notes/#projects-building-signature","title":"Projects building signature","text":"<p>The change above would also affect projects using animalsniffer plugin only to build signatures because check tasks are always registered (and so would fail on build).</p> <p>In this case, either disable no-signatures fail:</p> <pre><code>animalsniffer {\n    failWithoutSignatures = false\n}\n</code></pre> <p>or detach all animalsniffer check tasks from the <code>check</code> task:</p> <p><pre><code>animalsniffer {\n    defaultTargets = []\n}\n</code></pre> (read more about the new option below)</p> <p>Note</p> <p>The primary plugin function is signature checking and so no-signatures fail must be  enabled by default to prevent incorrect signatures configuration (unfortunately, quite common). Projects only building signatures would have to disable this check (sorry for inconvenience)</p>"},{"location":"about/release-notes/#changed-default-tasks-selection","title":"Changed default tasks selection","text":"<p>Before, the only way to define which animalsniffer tasks will run by default with the build (assigned to <code>check</code> task) was <code>sourceSets</code> option. And a common configuration was disabling test source checks (to check only main sources with the build):</p> <pre><code>animalsniffer {\n    sourceSets = [sourceSets.main]\n}\n</code></pre> <p>Now, test sources are not included by default. So the configuration above is not required anymore.</p> <p>There is a new configuration property <code>checkTestSources</code> to be able to enable test sources back:</p> <pre><code>aniamlsniffer {\n    checkTestSources = true  // by default false! \n}\n</code></pre> <p><code>sourceSets</code> configuration is deprecated. It will still work, but now plugin  supports android and kotlin multiplatform and this option simply can't cover all cases.</p> <p>Instead, there is a new option <code>defaultTargets</code>: you can specify required targets there for animalsniffer tasks to run with build.</p> <p>Target name is:</p> <ol> <li>Source set name for java plugins (java, kotlin, scala, groovy)</li> <li>Android variant or test component name for Android</li> <li>Platform compilation name for kotlin multiplatform</li> </ol> <p>By default, <code>defaultTargets = null</code> which means making all non-test (no 'test' in target name)  animalsniffer tasks default.</p> <p>Target platforms could be set with property:</p> <pre><code>animalsniffer {\n    defaultTargets = ['main']\n}\n</code></pre> <p>or with method:</p> <pre><code>animalsniffer {\n    defaultTargets 'main'\n}\n</code></pre> <p>Tip</p> <p>If you want to avoid all animalsniffer tasks during build set: <pre><code>defaultTargets = []\n</code></pre></p> <p>Note</p> <p>You can see all registered animalsniffer tasks with <code>printAnimalsnifferTasks</code> task</p>"},{"location":"about/release-notes/#android-projects-support","title":"Android projects support","text":"<p>Acknowledgment</p> <p>Thanks to @LikeTheSalad for initial  android support implementation. Without it, android support would not happen so soon  (it was the main trigger for all other changes in version 2.0).</p> <p>Android support activated with <code>com.android.library</code> or <code>com.android.application</code> plugins.</p> <p>Android variants and test components used for animalsniffer tasks source. By default: <code>debug</code> and <code>release</code> variants and <code>debugAndroidTest</code>, <code>debugUnitTest</code>  and <code>releaseUnitTest</code> test components.</p> <p>As test animalsniffer tasks not enabled by default, then only <code>animalsnifferDebug</code> and <code>animalsnifferRelease</code>  tasks would be assigned to <code>check</code> (to run as part of the build).</p> <p>But, in many projects, dubug and release variants would contain the same sources, so it would make sense to preserve only one of them:</p> <pre><code>animalsniffer {\n    defaultTargets 'debug'\n}\n</code></pre> <p>Note</p> <p>I can't apply this by default in case of android plugin because I don't know the specifics of your exact project.</p> <p>There is a complete android project example,  created with the android studio, with animalsniffer plugin activated (no special errors applied).</p>"},{"location":"about/release-notes/#collector-task","title":"Collector task","text":"<p>The new android api requires an additional task to be able to get access to configured sources. That's why plugin registers additinoal \"collector\" tasks (like <code>debugAnimalsnifferClassesCollector</code>) -  it is used ONLY to receive android configuration (no actual action in task itself)</p>"},{"location":"about/release-notes/#kotlin-multiplatform-projects-support","title":"Kotlin multiplatform projects support","text":"<p>Kotlin multiplatform support activated for <code>org.jetbrains.kotlin.multiplatform</code> plugin.</p> <p>Important</p> <p>Before, it was required to apply <code>.withJvm()</code> in order to activate animalsniffer. It is not required anymore - complete support was implemented.  If you use <code>.withJvm()</code> plugin will not duplicate animlasniffer tasks (because it enables java-base plugin) - only multiplatform support would work.</p> <p>Platform compilations used for animalsniffer tasks source.</p> <p>For example, in a simple case with one platform:</p> <pre><code>kotlin {\n    jvm()\n}\n</code></pre> <p>Two animalsniffer tasks would be registered: <code>animalsnifferJvmMain</code> and <code>animalsnifferJvmTest</code>.</p> <p>Note</p> <p>Tasks for \"metadata\" (common platform) is not registered because these sources  are always included in each platform (and animalsniffer would check them) </p>"},{"location":"about/release-notes/#android","title":"Android","text":"<p>When multiplatform used with android plugin, then \"android platform\" would be ignored - direct android support would be used instead (but missed kotlin sources would be added to android check tasks).</p> <p>For example, suppose we have a project with two platforms:</p> <pre><code>kotlin {\n    androidTarget { ... }\n    jvm()\n}\n</code></pre> <p>Then animalsniffer tasks for jvm platform would be registered by multiplatform support and  android tasks by android support: <code>animalsnifferDebug</code>, <code>animalsnifferDebugAndroidTest</code>, <code>animalsnifferDebugUnitTest</code>, <code>animalsnifferJvmMain</code>, <code>animalsnifferJvmTest</code>, <code>animalsnifferRelease</code>, <code>animalsnifferReleaseUnitTest</code>.</p> <p>Default tasks (assigned to check) would be: <code>animalsnifferDebug</code>, <code>animalsnifferJvmMain</code> and <code>animalsnifferRelease</code> </p> <p>If you want to check only jvm sources with the build:</p> <pre><code>animlasniffer {\n    defaultTargets 'jvmMain'\n}\n</code></pre> <p>There is a complete multiplatform project examples (generated with kotlin init site) with configured animalsniffer plugin (but without errors):</p> <ul> <li>Multiplatform: android only - 1 multiplatform target</li> <li>Multiplatform: android, desktop, server - several multiplatform targets</li> <li>Multiplatform: desktop, server - 2 targets, without android</li> </ul>"},{"location":"about/release-notes/#improved-debug","title":"Improved debug","text":"<p>As before, debug option (<code>animalsniffer.debug = true</code>) prints debug info just before animalsniffer task execution (configured signatures, classes to check and source paths).</p> <p>With java plugins, it was obvious what tasks plugin would register (task per source set).  But with android and kotlin multiplatform plugins, it might not be obvious.</p>"},{"location":"about/release-notes/#print-animalsniffer-tasks","title":"Print animalsniffer tasks","text":"<p>A new <code>printAnimalsnifferTasks</code> was added to see all registered check tasks.</p> <p>Java plugin sample:</p> <pre><code>&gt; Task :printAnimalsnifferTasks\n\n\n    animalsnifferMain                   [default]       for 'main' source set\n        report: build/reports/animalsniffer/main.text\n        depends on: classes\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/java/main\n        sources:\n            src/main/java\n</code></pre> <p>Android plugin sample:</p> <pre><code>    animalsnifferDebug                  [default]       for 'debug' android variant\n        report: build/reports/animalsniffer/debug.text\n        depends on: debugAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n            java18-1.0.signature\n        classes:\n            build/intermediates/javac/debug/classes\n        sources:\n            build/generated/aidl_source_output_dir/debug/out                                 NOT EXISTS\n            build/generated/renderscript_source_output_dir/debug/out                         NOT EXISTS\n            build/generated/source/buildConfig/debug\n            src/debug/java                                                                   NOT EXISTS\n            src/debug/kotlin                                                                 NOT EXISTS\n            src/main/java\n            src/main/kotlin                                                                  NOT EXISTS\n</code></pre> <p>Kotlin multiplatform sample:</p> <pre><code>    animalsnifferJvmMain                [default]       for kotlin platform 'jvm' compilation 'main'\n        report: build/reports/animalsniffer/jvmMain.text\n        depends on: jvmMainClasses\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/kotlin/jvm/main\n        sources:\n            src/commonMain/kotlin                                                            NOT EXISTS\n            src/jvmMain/kotlin\n</code></pre> <p>Note</p> <p>For each task, source origin is described, .e.g. \"for kotlin platform 'jvm' compilation 'main'\". <code>[default]</code> marker means that task is attached to <code>check</code> task (use <code>animalsniffer.defaultTaragets</code> to change it)</p> <p>Read more in docs</p>"},{"location":"about/release-notes/#print-animalsniffer-sources","title":"Print animalsniffer sources","text":"<p>Another special task was added during android and multiplatform support development,  to better understand compilation tasks and sources structure.</p> <p><code>printAnimalsnifferSourceInfo</code> prints registered plugins, compile tasks, all source sets, android and kotlin components.</p> <p>This task might be useful for bug reports in case when animalsniffer task misses some sources.</p> <p>Read more in docs. See example outputs for java, android and multiplatform</p>"},{"location":"about/release-notes/#csv-report","title":"CSV report","text":"<p>There was a text report, looking like this (each line - error description):</p> <pre><code>invalid.Sample:1 (#field)  Undefined reference: java.nio.file.Path\ninvalid.Sample:13  Undefined reference: int Boolean.compare(boolean, boolean)\n</code></pre> <p>Now there is also a CSV report:</p> <pre><code>java16-sun-1.0;invalid.Sample.java;;field;java.nio.file.Path;false\njava16-sun-1.0;invalid.Sample.java;13;;int Boolean.compare(boolean, boolean);false\n</code></pre> <p>This CSV report is required because now animalsniffer run inside gradle worker (which may run even in different jvm) and the only way to get access to found errors in check task itself is an intermediate file.</p> <p>This might be an internal file, but I preserved it as a task report to let other tools (if any) use it for error representation (and avoid additional parsing).</p>"},{"location":"about/release-notes/#new-task-properties","title":"New task properties","text":"<p>Added properties to help distinguish animalsniffer tasks:</p> <ul> <li><code>targetType</code> - task source origin: Java, Multiplatform, Android</li> <li><code>targetName</code> - task target name (e.g. \"main\" (source set), \"debug\" (variant), \"jvmMain\" platform compilation) </li> </ul> <p>It might be useful if you need to configure tasks based on a registration source (for whatever reason). For example:</p> <pre><code>tasks.withType(AnimalSniffer).configureEach { task -&gt;\n    // no package required for TargetType enum because it's name registered as shortcut\n    if (task.targetType == TargetType.Android) {\n        // do something\n    }\n}\n</code></pre>"},{"location":"about/release-notes/#other-changes","title":"Other changes","text":"<ul> <li>Gradle configuration cache compatibility (required for gradle 9) </li> <li>All animalsniffer tasks now belong to the <code>animalsniffer</code> group (in IDE, you could find all of them under animalsniffer tasks subfolder)</li> <li>Animalsniffer now used directly (with gradle worker) and not through intermediate ant tasks</li> <li>Renamed caching tasks to differentiate them with check tasks: before, cache tasks prefix was \"animalsnifferCache\", now \"cache\".    Also renamed target (cache) signature path: <code>/animalsniffer/cache/[checkTargetName]/[checkTaskName]Cache.sig</code> </li> <li>Change source field names representation in reports (in some cases, animalsniffer shows class field name instead of source line):   before field was shown as \"fieldName field\" now \"#fieldName\"</li> </ul>"},{"location":"about/release-notes/#migration-notes","title":"Migration notes","text":"<p>Plugin would work as before, except for projects only building signatures (read above). For such projects, just disable no-signatures check:</p> <pre><code>animalsniffer {\n    failWithoutSignatires = false\n}\n</code></pre> <p>If you were configuring sourceSets like this: <code>sourceSets = [sourceSets.main]</code> - it is not required anymore, just remove. For more complex source sets configuration, consider migration into <code>defaultTargets</code> option.</p> <p>In kotlin multiplatform project, if you use <code>.withJava()</code> only to enable animalsniffer checks - it is not required anymore (and could be removed if not needed).</p> <p>Test tasks are not assigned to check (test sources not checked with the build, by default). To revert old behaviour:</p> <pre><code>animalsniffer {\n    checkTestSources = true\n}\n</code></pre>"},{"location":"guide/configuration/","title":"Configuration","text":"<p>Configuration example:</p> <pre><code>animalsniffer {\n    toolVersion = '1.23'\n    // sourceSets = [sourceSets.main]\n    defaultTargets 'main'\n    ignoreFailures = true\n    reportsDir = file(\"$project.buildDir/animalsnifferReports\")\n    annotation = 'com.mypackage.MyAnnotation'\n    ignore = ['java.nio.file.Paths']\n}\n</code></pre> <p>There are no required configurations \u2014 the plugin will generate defaults for all of them.</p> Property Description Default value toolVersion AnimalSniffer version 1.24 sourceSets Source sets to check (DEPRECATED: use defaultTargets instead) all source sets defaultTargets Target names (source set, android variant, kotlin platform) to check by default all targets checkTestSources Check test sources false failWithoutSignatures Fail check task if no signatures declared true ignoreFailures False to stop build when violations found, true to continue false debug Log animalsniffer configuration (useful in case of configuration problems) false reportsDir Reports directory file(\"$project.buildDir/reports/animalsniffer\") annotation Annotation class to avoid check under annotated block ignore Ignore usage of classes, not mentioned in signature signatures Signatures to use for check <code>configurations.signature</code> excludeJars Patterns to exclude jar names from classpath. Required for library signatures usage cache Cache configuration By default, cache disabled <p>NOTE: <code>ignore</code> does not exclude your classes from check, it allows you to use classes not mentioned in the signature. See more details above.</p>"},{"location":"guide/configuration/#tasks","title":"Tasks","text":"<p>The animalsniffer task is registered for each \"source set\". For example:</p> <ul> <li><code>animalsnifferMain</code> - run AnimalAniffer for compiled main classes</li> <li><code>animalsnifferTest</code> - run AnimalSniffer for compiled test classes</li> <li><code>animalsniffer[SourceSet]</code> - run AnimalSniffer for compiled <code>[SourceSet]</code> classes</li> </ul> <p>Read task registration specifics: java, [android][use/android.md], multiplatform</p> <p>Tasks support text and CSV reports, enabled by default.</p> <p>To disable text reports for a task:</p> <pre><code>animalsnifferMain.reports.text.enabled = false\n</code></pre> <p>or for all tasks:</p> <pre><code>tasks.withType(AnimalSniffer) {\n    reports.text.enabled = false\n}\n</code></pre> <p>(CSV report can't be disabled)</p> <p>Animalsniffer task is a SourceTask and may be configured to include/exclude classes from check.</p> <p>Note</p> <p>The task operates on compiled classes and not sources! Be careful when defining patterns.</p> <p>For example, to exclude classes in a 'invalid' subpackage from check:</p> <pre><code>animalsnifferMain {\n    exclude('**/invalid/*')\n}\n</code></pre>"},{"location":"guide/configuration/#selecting-tasks-by-type","title":"Selecting tasks by type","text":"<p>Check tasks contain special properties to simplify selection:</p> <ul> <li><code>targetType</code> - task source origin: Java, Multiplatform, Android</li> <li><code>targetName</code> - task target name (e.g. \"main\" (source set), \"debug\" (variant), \"jvmMain\" platform compilation)</li> </ul> <p>It might be useful if you need to configure tasks based on a registration source (for whatever reason). For example:</p> <pre><code>tasks.withType(AnimalSniffer).configureEach { task -&gt;\n    // no package required for TargetType enum because it's name registered as shortcut\n    if (task.targetType == TargetType.Android) {\n        // do something\n    }\n}\n</code></pre>"},{"location":"guide/performance/","title":"Check task performance","text":"<p>The following optimization is useful if check task is used often: time-to-time  checks without clean.</p> <p>Check task may take significant time on projects with large classpath.  A common example is a gralde plugin project with ~100mb classpath (grale-api.jar).</p>"},{"location":"guide/performance/#what-animalsniffer-do","title":"What animalsniffer do","text":"<p>Animalsniffer signatures (jdk, android) contains classes and methods of all  jdk/android classes. But animalsniffer must also know your entire classpath to  differentiate 3<sup>rd</sup> party api usage from missed jdk/android classes or methods.</p> <p>So for each check run:</p> <ul> <li>Signature file(s) loaded and parsed</li> <li>All classpath jars read (including scanning all jars content to build the ignore list)</li> <li>All project files are also added to the ignore list</li> </ul> <p>For example, check on gradle plugin could take ~10sec, where actual checking time is  only ~1sec and the rest is processing of gradle jars.</p>"},{"location":"guide/performance/#cache","title":"Cache","text":"<p>The obvious solution is to load and process all classpath jars once.  This way only the first run would be slow and other check runs will be much faster.</p> <p>The plugin provides a special \"cache\" option for check tasks. To enable cache:</p> <pre><code>animalsniffer {\n    cache.enabled = true\n}\n</code></pre> <p>When cache is enabled, an extra task will be added for each source set (before  each animalsniffer check task). This task will build special signature, containing  the original signature and all jars in your classpath. This signature will be built  once and used for all further check task runs (until you call clean).</p> <p>Extra tasks are named like: cache[animalsniffer task name]Signatures.  For example, main source set task (animalsnifferMain) pair is cacheAnimalsnifferMainSignatures.</p> <p>Note</p> <p>For multi-module project, generated signature will not include module jars to avoid signature re-generation because of module changes.</p> <p>Note</p> <p>When multiple signatures used (jdk and android) for the check, multiple  cache signatures will be produced.</p> <p>Pay attention</p> <p>Cache will make no sense if you always call animalsniffer after clean or just rarely use it. Cache build is a bit slower then normal check run, so it only makes sense when check used very often. Also, please note that cache has a side effect (read below about exclusions) and known issues (see below).</p>"},{"location":"guide/performance/#reduce-cached-signature-size","title":"Reduce cached signature size","text":"<p>Note</p> <p>In most cases, manual optimization is not required. Use it if you need to  optimize check task time.</p> <p>Without the need to load classpath jars, animalsniffer check task time would mainly  depend on signature size: signature contains thousands of class descriptors, and  usually loading signature is slower than overall check. So, to make a check task  faster, we can reduce generated signature size.</p> <p>It could be done using special signature view task.</p>"},{"location":"guide/performance/#jdk-signature","title":"JDK signature","text":"<p>For example, look java6 signature contents:</p> <pre><code>dependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n}\n\ntask printSignature(type: ru.vyarus.gradle.plugin.animalsniffer.info.SignatureInfoTask) {\n    signature = configurations.signature\n    depth = 2\n}\n</code></pre> <p>It will print:</p> <pre><code>Signature java16-sun-1.0.signature (1.7 Mb) contains 18312 classes\n    com.sun                        7115\n    javax.swing                    1781\n    sun.awt                        771\n    java.util                      662\n    sun.nio                        640\n    sun.security                   632\n    ...\n</code></pre> <p>Here you can see that java6 signature (1.7mb file) contains 18312 classes. Different depth values could be used to build different views. For example, with depth = 1:</p> <pre><code>Signature java16-sun-1.0.signature (1.7 Mb) contains 18312 classes\n    com                  7115\n    sun                  4636\n    javax                3327\n    java                 2441\n    org                  790\n    sunw                 3\n</code></pre> <p>See that <code>sun.*</code> package contains 4636 classes. These are internal classes and should never be used, so we can safely remove them from the signature. <code>com.sun</code> is also rarely used and could be also excluded. Most likely <code>javax.swing</code> too. So overall we could significantly reduce signature size:</p> <pre><code>18312 (all) - 4636 (sun) - 7115 (com.sun) - 1781 (javax.swing) = 4780 (more than 3 times smaller!)\n</code></pre> <p>Such exclusions are project specific and should be applied manually (if required), but, as <code>sun.*</code> is strongly not recommended for usage, this package is removed by default (more info described below) to use reduced signature out of the box.</p>"},{"location":"guide/performance/#generated-source-set-signature","title":"Generated source set signature","text":"<p>It is more interesting to analyze signature, generated by cache task (which includes base signature and all jars from the classpath):</p> <pre><code>dependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n    implementation 'junit:junit:4.12'\n}\n\ntask printSignature(type: ru.vyarus.gradle.plugin.animalsniffer.info.SignatureInfoTask) {\n    signature = animalsnifferCacheMain.outputFiles\n    depth = 1\n}\n</code></pre> <p>It will print:</p> <pre><code>Signature animalsnifferCacheMain.sig (1.3 Mb) contains 14007 classes\n    com                  7115\n    javax                3327\n    java                 2441\n    org                  1093\n    junit                28\n    sunw                 3\n</code></pre> <p>Note that generated signature is less than original java signature. This is because <code>sun.*</code> package is removed by default (removing ~4000 classes and reducing the signature size by ~400kb).</p> <p>This is the default exclusion value:</p> <pre><code>animalsniffer {\n    cache {\n        enabled = true\n        exclude = ['sun.*', 'org.gradle.internal.impldep.*']\n    }\n}\n</code></pre> <p><code>org.gradle.internal.impldep.*</code> is repackaged 3<sup>rd</sup> parties inside gradle jar. This exclusion is very handy for gradle plugin projects (because removes 16239 never used classes from signature).</p> <p>To exclude other packages use <code>cache.exclude</code> configuration method:</p> <pre><code>animalsniffer {\n    cache {\n        enabled = true\n        exclude 'com.sun.*', 'javax.swing.*'\n    }\n}\n</code></pre> <p>This will add exclusions without overriding default ones (the method may be called multiple times). Using print task above with this exclusions will give:</p> <pre><code>Signature animalsnifferResourcesMain.sig (409.4 Kb) contains 5111 classes\n    java                 2441\n    javax                1546\n    org                  1093\n    junit                28\n    sunw                 3\n</code></pre> <p>Overall class count (5111) is larger than it was showed on raw java6 signature because of junit dependency, which classes were also included.</p> <p>To override default exclusions, assign collection directly to property:</p> <pre><code>animalsniffer {\n    cache {\n        enabled = true\n        exclude = ['com.sun.*', 'javax.swing.*'] // or simply [] to just remove defaults\n    }\n}\n</code></pre>"},{"location":"guide/performance/#known-issues","title":"Known issues","text":"<p>Java 8 signature (<code>org.codehaus.mojo.signature:java18:1.0@signature</code>) may conflict with gradle api:</p> <pre><code>:animalsnifferCacheMain FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':animalsnifferCacheMain'.\n&gt; java.lang.ClassCastException: Cannot merger class javax/xml/xpath/XPathFactoryFinder$1 as it has changed superclass:\n</code></pre> <p>There is nothing we can do with it, and for such cases cache can't be used.</p> <p>Anyway, if you have a problem like this which you can't solve, please create a new issue. Your specific case may help to find some workaround (or even lead to the solution).</p>"},{"location":"guide/report/","title":"Reports","text":"<p>The plugin supports 3 report types:</p> <ol> <li>Console report (always enabled) - simplifies errors resolution</li> <li>Text file - human-readable text report </li> <li>CSV file (always enabled) - required by plugin internally; could be used for external tool integration</li> </ol> <p>Note</p> <p>As plugin was written in the same manner as other gradle quality plugins, reports configuration is also the same.</p> <p>File reports directory could be set with:</p> <pre><code>animalsniffer {\n    reportsDir = file(\"$project.buildDir/reports/animalsniffer\")\n}\n</code></pre>"},{"location":"guide/report/#console-report","title":"Console report","text":"<p>Example output:</p> <pre><code>2 AnimalSniffer violations were found in 1 files. See the report at: file:///myproject/build/reports/animalsniffer/main.text\n\n[Undefined reference] invalid.(Sample.java:9)\n&gt;&gt; int Boolean.compare(boolean, boolean)\n\n[Undefined reference] invalid.(Sample.java:14)\n&gt;&gt; java.nio.file.Path java.nio.file.Paths.get(String, String[])\n</code></pre> <p>Class in braces <code>(Sample.java:9)</code> should be clickable in IDE, and so you could quickly find the place of the problem.</p> <p>When the problem detected in class field, animalsniffer reports field name, but without line:</p> <pre><code>public class Sample {\n\n    private Path field;\n</code></pre> <pre><code>[Undefined reference] invalid.(Sample.java:1) #field\n  &gt;&gt; java.nio.file.Path\n</code></pre> <p>In this case, the class link would only open the source file (no way to know the exact line - animalsniffer does not provide it).</p>"},{"location":"guide/report/#text-report","title":"Text report","text":"<p>Human-readable text report. The link to text report is printed in the console report, so it could be opened directly.</p> <p>Example:</p> <pre><code>invalid.Sample:11  Undefined reference: int Boolean.compare(boolean, boolean)\ninvalid.Sample:16  Undefined reference: java.nio.file.Path java.nio.file.Paths.get(String, String[])\n</code></pre> <p>Each line is a single error.</p> <p>As was described above, for class field-related errors, line number would be incorrect:</p> <pre><code>invalid.Sample:1 (#field)  Undefined reference: java.nio.file.Path\n</code></pre> <p>Text report could be disabled with:</p> <pre><code>tasks.withType(AnimalSniffer) {\n    reports.text.required = false\n}\n</code></pre> <p>Changed report output (only for one report type):</p> <pre><code>tasks.withType(AnimalSniffer) {\n    reports.text.outputLocation = file('build/custom.txt')\n}\n</code></pre>"},{"location":"guide/report/#csv-report","title":"CSV report","text":"<p>The plugin uses CSV report to get an error list from animalsniffer (executed by gradle worker; possibly, in different jvm) into a plugin task (console and text reports are generated from CSV report).</p> <p>The report could be useful for external tools integration as it contains easily parsable data.</p> <p>Example report:</p> <pre><code>java16-sun-1.0;invalid.Sample.java;;field;java.nio.file.Path;false\njava16-sun-1.0;invalid.Sample.java;13;;int Boolean.compare(boolean, boolean);false\n</code></pre> <p>Columns: </p> <ol> <li>Signature name </li> <li>Source file </li> <li>Source line (could be empty) </li> <li>Source field (could be empty) </li> <li>Error message </li> <li>Animalsniffer message parsing status: true if parse failed (in this case, only message column would contain the entire (not parsed) message)</li> </ol> <p>It is not possible to disable this report (plugin simply ignores <code>reports.csv.required</code> setting). But the location of CSV file could be configured (only for one report type):</p> <pre><code>tasks.withType(AnimalSniffer) {\n    reports.csv.outputLocation = file('build/custom.csv')\n}\n</code></pre>"},{"location":"guide/suppress/","title":"Suppress violations","text":"<p>Special annotation could be used to suppress violations: examples</p>"},{"location":"guide/suppress/#default-annotation","title":"Default annotation","text":"<p>Add dependency on the annotation artifact:</p> <pre><code>implementation \"org.codehaus.mojo:animal-sniffer-annotations:1.24\"\n</code></pre> <p>Use <code>provided</code> scope if you can. Annotation is configured by default, so you can simply use annotation to suppress violation:</p> <pre><code>@IgnoreJRERequirement\nprivate Optional param;\n</code></pre>"},{"location":"guide/suppress/#custom-annotation","title":"Custom annotation","text":"<p>You can define your own annotation:</p> <pre><code>package com.mycompany\n\n@Retention(RetentionPolicy.CLASS)\n@Documented\n@Target({ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.TYPE})\npublic @interface SuppressSignatureCheck {}\n</code></pre> <p>Configure annotation:</p> <pre><code>animalsniffer {\n    annotation = 'com.mycompany.SuppressSignatureCheck'\n}\n</code></pre> <p>Now check will skip blocks annotated with your annotation:</p> <pre><code>@SuppressSignatureCheck\nprivate Optional param;\n</code></pre>"},{"location":"guide/suppress/#ignore-classes","title":"Ignore classes","text":"<p>Your project could target multiple Java versions and so reference classes, not present in a signature.</p> <p>For example, your implementation could try to use Java 7 <code>Paths</code> and if the class is not available, fall back to the Java 6 implementation. In this case <code>Paths</code> could be added to the ignored classes:</p> <pre><code>animalsniffer {\n    ignore 'java.nio.file.Paths'\n}\n</code></pre> <p>Now usages of <code>Paths</code> will not cause warnings.</p> <p>Multiple ignored classes could be defined:</p> <pre><code>animalsniffer {\n    ignore 'java.nio.file.Paths', 'some.other.Class'\n}\n</code></pre> <p>Or</p> <pre><code>animalsniffer {\n    ignore 'java.nio.file.Paths'\n    ignore 'some.other.Class'\n}\n</code></pre> <p>Or by directly assigning collection:</p> <pre><code>animalsniffer {\n    ignore  = ['java.nio.file.Paths', 'some.other.Class']\n}\n</code></pre> <p>Entire packages could be ignored using asterisk:</p> <pre><code>animalsniffer {\n    ignore 'some.pkg.*'\n}\n</code></pre> <p>See more info in the documentation.</p>"},{"location":"guide/view/","title":"View signature content","text":"<p>A special task is provided to be able to view signature content <code>SignatureInfoTask</code>.</p> <p>Task supposed to be used for:</p> <ul> <li>Curiosity: review default signatures content</li> <li>Check: review build signature (after build signature task)</li> <li>Optimize: review and optimize cache signature size to speed up check task</li> </ul>"},{"location":"guide/view/#jdk-signature","title":"JDK signature","text":"<p>For example, to look java6 signature contents use:</p> <pre><code>dependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n}\n\ntask printSignature(type: ru.vyarus.gradle.plugin.animalsniffer.info.SignatureInfoTask) {\n    signature = configurations.signature\n    depth = 2\n}\n</code></pre> <p>It will print:</p> <pre><code>Signature java16-sun-1.0.signature (1.7 Mb) contains 18312 classes\n    com.sun                        7115\n    javax.swing                    1781\n    sun.awt                        771\n    java.util                      662\n    sun.nio                        640\n    sun.security                   632\n    ...\n</code></pre> <p>Here you can see that java6 signature (1.7mb file) contains 18312 classes. Different depth values could be used to build different views. For example, with depth = 1:</p> <pre><code>Signature java16-sun-1.0.signature (1.7 Mb) contains 18312 classes\n    com                  7115\n    sun                  4636\n    javax                3327\n    java                 2441\n    org                  790\n    sunw                 3\n</code></pre>"},{"location":"guide/view/#sorting-by-name","title":"Sorting by name","text":"<p>If you want to see alphabetical packages order, then disable sorting by size:</p> <pre><code>task printSignature(type: ru.vyarus.gradle.plugin.animalsniffer.info.SignatureInfoTask) {\n    signature = animalsnifferCacheMain.outputFiles\n    depth = 2\n    sortBySize = false\n}\n</code></pre> <pre><code>Signature java16-sun-1.0.signature (1.7 Mb) contains 18312 classes\n    com.sun                        7115\n    java.applet                    5\n    java.awt                       561\n    java.beans                     155\n    java.io                        126\n    java.lang                      239\n</code></pre> <p>This may be handy for educational purposes.</p>"},{"location":"guide/view/#project-signature","title":"Project signature","text":"<p>Checking just created project signature:</p> <pre><code>animalsnifferSignature {\n    files sourceSets.main.output\n}\n\ntask printSignature(type: ru.vyarus.gradle.plugin.animalsniffer.info.SignatureInfoTask) {\n    signature = tasks.animalsnifferSignature.outputFiles\n    depth = 1\n}\n</code></pre>"},{"location":"guide/view/#cache-signature","title":"Cache signature","text":"<p>Checking signature caches for check task:</p> <pre><code>animalsniffer {\n   cache.enabled = true\n}\n\ntask printSignature(type: ru.vyarus.gradle.plugin.animalsniffer.info.SignatureInfoTask) {\n    signature = cacheAnimalsnifferMainSignatures.outputFiles\n    depth = 2\n    sortBySize = false\n}\n</code></pre> <p>When multiple signatures used for the check, multiple info messages will be printed:</p> <pre><code>dependencies {\n   signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n   signature 'net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature'                \n   implementation 'org.slf4j:slf4j-api:1.7.25'\n}\n</code></pre> <pre><code>Signature animalsnifferMainCache_!java16-sun-1.0.sig (1.3 Mb) contains 13710 classes\n    com.sun                        7115\n    javax.swing                    1781\n    java.util                      662\n    java.awt                       561\n    org.omg                        538\n    javax.xml                      395\n    javax.management               250\n    java.lang                      239\n    java.security                  212\n    javax.print                    156\n    java.beans                     155\n    java.nio                       150\n    org.w3c                        150\n    java.io                        126\n    java.net                       122\n    javax.naming                   115\n    javax.security                 99\n    javax.imageio                  89\n    java.rmi                       77\n    java.text                      71\n    javax.sound                    71\n    javax.crypto                   63\n    org.jcp                        55\n    java.sql                       51\n    javax.lang                     48\n    javax.net                      48\n    javax.sql                      48\n    org.xml                        39\n    org.slf4j                      34\n    javax.accessibility            27\n    javax.activation               27\n    javax.tools                    22\n    javax.annotation               19\n    javax.rmi                      17\n    javax.smartcardio              16\n    javax.jws                      14\n    javax.script                   13\n    java.math                      10\n    org.ietf                       8\n    javax.transaction              6\n    java.applet                    5\n    javax.activity                 3\n    sunw.util                      2\n    sunw.io                        1\nSignature animalsnifferMainCache_!android-api-level-14-4.0_r4.sig (317.1 Kb) contains 3167 classes\n    org.apache                     367\n    java.util                      229\n    java.security                  173\n    android.widget                 166\n    android.provider               160\n    android.view                   157\n    java.lang                      132\n    android.text                   120\n    android.graphics               108\n    android.content                103\n    android.app                    92\n    android.renderscript           84\n    java.io                        80\n    android.net                    70\n    java.nio                       69\n    android.media                  68\n    android.os                     62\n    java.net                       60\n    javax.xml                      54\n    android.database               53\n    java.sql                       48\n    android.test                   44\n    android.webkit                 42\n    javax.crypto                   42\n    android.util                   41\n    javax.net                      39\n    org.w3c                        36\n    org.xml                        35\n    org.slf4j                      34\n    java.text                      30\n    android.hardware               27\n    android                        24\n    android.preference             23\n    android.drm                    22\n    android.nfc                    21\n    android.opengl                 20\n    javax.security                 19\n    android.animation              18\n    android.telephony              18\n    android.bluetooth              16\n    javax.sql                      15\n    android.speech                 14\n    android.accounts               13\n    android.gesture                13\n    android.inputmethodservice     13\n    javax.microedition             13\n    android.location               11\n    junit.framework                10\n    android.sax                    7\n    android.appwidget              5\n    android.mtp                    5\n    java.beans                     5\n    org.json                       5\n    org.xmlpull                    5\n    android.service                4\n    dalvik.system                  4\n    java.math                      4\n    android.security               3\n    junit.runner                   3\n    android.accessibilityservice   2\n    dalvik.annotation              2\n    dalvik.bytecode                2\n    java.awt                       2\n    com.android                    1\n</code></pre>"},{"location":"guide/debug/debug/","title":"Debug option","text":"<p>If you're not sure that animalsniffer check or build task is correctly configured,  use debug mode:</p> <pre><code>animalsniffer {\n    debug = true\n}\n</code></pre> <p>After activation, it would print task configuration just before execution.</p> <p>Note</p> <p>Debug info will not appear if animalsniffer task skipped (e.g. due to no classes to check)</p>"},{"location":"guide/debug/debug/#check","title":"Check","text":"<p>Example for the check task in a simple java project:</p> <pre><code>&gt; Task :animalsnifferMain\n\n    signatures:\n        java16-sun-1.0.signature\n\n    sources:\n        src/main/java\n\n    files:\n        build/classes/java/main/valid/Sample.class\n</code></pre> <p>Here you can see:</p> <ul> <li>Applied signatures</li> <li>Source directories</li> <li>All checked class files</li> </ul> <p>Another example - check task in android project:</p> <pre><code>&gt; Task :animalsnifferDebug\n\n    signatures:\n        java18-1.0.signature\n        android-api-level-21-5.0.1_r2.signature\n\n    sources:\n        build/generated/aidl_source_output_dir/debug/out\n        build/generated/renderscript_source_output_dir/debug/out\n        build/generated/source/buildConfig/debug\n        src/debug/java\n        src/debug/kotlin\n        src/main/java\n        src/main/kotlin\n\n    files:\n        build/intermediates/javac/debug/classes/com/example/namespace/BuildConfig.class\n        build/intermediates/javac/debug/classes/invalid/Sample.class\n</code></pre>"},{"location":"guide/debug/debug/#build","title":"Build","text":"<p>Example output for build signature task:</p> <pre><code>&gt; Task :animalsnifferSignature\nspock_Check_include_and_e_0_testProjectDir16553270069100638944.sig\n\n    files:\n        build/classes/java/main\n        build/resources/main\n\n    include:\n        valid.*\n\n    exclude:\n        invalid.*\n</code></pre> <p>Different options might be shown (depends on task configuration):</p> <ol> <li>Output signature name (at the top)</li> <li>Source signature files</li> <li>Source classes (dirs)</li> <li>Include patterns</li> <li>Exclude patterns</li> </ol>"},{"location":"guide/debug/sources/","title":"Source sets debug","text":"<p>Note</p> <p>This task is useful for debugging plugin behavior. initially, it was written during android and kotlin multiplatform support development to see what sources and tasks are present in the (android) project.</p> <p>Task preserved in release in case of incorrect sources registration for animalsniffer  tasks (so output could be assigned to the issue and help with investigation).</p> <p>Moreover, task relies on deprecated android api and most likely would be removed when  such api would disappear. </p> <p><code>printAnimalsnifferSourceInfo</code> task prints:</p> <ol> <li>Registered plugins</li> <li>Compile tasks (hierarchy): all tasks with \"compile\" or \"classes\" in name</li> <li>Java source sets (if java plugin registered)</li> <li>Android variants and source sets (old api used)</li> <li>Multiplatform platforms, compilations and source sets</li> </ol> <p>Example report for android project:</p> <pre><code>== [Plugins] ===============================================================\n\n    Plugins of potential interest ------------------------------------------ (5)\n        &lt;no id&gt;                                                            com.android.build.gradle.api.AndroidBasePlugin\n        com.android.application                  application               com.android.build.gradle.AppPlugin\n        com.android.internal.application         application               com.android.build.gradle.internal.plugins.AppPlugin\n        &lt;no id&gt;                                                            org.gradle.api.plugins.JavaBasePlugin\n        com.android.internal.version-check       version-check             com.android.build.gradle.internal.plugins.VersionCheckPlugin\n\n    Other plugins ----------------------------------------------------------- (9)\n        ru.vyarus.animalsniffer                  animalsniffer             ru.vyarus.gradle.plugin.animalsniffer.AnimalSnifferPlugin\n        &lt;no id&gt;                                                            org.gradle.api.plugins.BasePlugin\n        org.gradle.build-init                    build-init                org.gradle.buildinit.plugins.BuildInitPlugin\n        org.gradle.help-tasks                    help-tasks                org.gradle.api.plugins.HelpTasksPlugin\n        &lt;no id&gt;                                                            org.gradle.api.plugins.JvmEcosystemPlugin\n        &lt;no id&gt;                                                            org.gradle.api.plugins.JvmToolchainsPlugin\n        &lt;no id&gt;                                                            org.gradle.language.base.plugins.LifecycleBasePlugin\n        &lt;no id&gt;                                                            org.gradle.api.plugins.ReportingBasePlugin\n        org.gradle.wrapper                       wrapper                   org.gradle.buildinit.plugins.WrapperPlugin\n\n\n== [Compile Tasks] ===============================================================\n\n    Tasks containing 'compile' in name ------------------------------------ (46)\n\n        compileDebugAidl                         com.android.build.gradle.tasks.AidlCompile\n        compileDebugAndroidTestAidl              com.android.build.gradle.tasks.AidlCompile\n        compileReleaseAidl                       com.android.build.gradle.tasks.AidlCompile\n        debugAndroidTestAnimalsnifferClassesCollector ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n        debugAnimalsnifferClassesCollector       ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n        debugUnitTestAnimalsnifferClassesCollector ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n        releaseAnimalsnifferClassesCollector     ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n        releaseUnitTestAnimalsnifferClassesCollector ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n        bundleDebugAndroidTestClassesToCompileJar com.android.build.gradle.internal.feature.BundleAllClasses\n        bundleDebugAndroidTestClassesToRuntimeJar com.android.build.gradle.internal.feature.BundleAllClasses\n        bundleDebugClassesToCompileJar           com.android.build.gradle.internal.feature.BundleAllClasses\n        bundleDebugClassesToRuntimeJar           com.android.build.gradle.internal.feature.BundleAllClasses\n        bundleDebugUnitTestClassesToCompileJar   com.android.build.gradle.internal.feature.BundleAllClasses\n        bundleDebugUnitTestClassesToRuntimeJar   com.android.build.gradle.internal.feature.BundleAllClasses\n        bundleReleaseClassesToCompileJar         com.android.build.gradle.internal.feature.BundleAllClasses\n        bundleReleaseClassesToRuntimeJar         com.android.build.gradle.internal.feature.BundleAllClasses\n        bundleReleaseUnitTestClassesToCompileJar com.android.build.gradle.internal.feature.BundleAllClasses\n        bundleReleaseUnitTestClassesToRuntimeJar com.android.build.gradle.internal.feature.BundleAllClasses\n        checkDebugAndroidTestDuplicateClasses    com.android.build.gradle.internal.tasks.CheckDuplicateClassesTask\n        checkDebugDuplicateClasses               com.android.build.gradle.internal.tasks.CheckDuplicateClassesTask\n        checkReleaseDuplicateClasses             com.android.build.gradle.internal.tasks.CheckDuplicateClassesTask\n        compileDebugArtProfile                   com.android.build.gradle.internal.tasks.CompileArtProfileTask\n        compileReleaseArtProfile                 com.android.build.gradle.internal.tasks.CompileArtProfileTask\n        compileDebugAndroidTestSources           org.gradle.api.DefaultTask\n        compileDebugSources                      org.gradle.api.DefaultTask\n        compileDebugUnitTestSources              org.gradle.api.DefaultTask\n        compileLintChecks                        org.gradle.api.DefaultTask\n        compileReleaseSources                    org.gradle.api.DefaultTask\n        compileReleaseUnitTestSources            org.gradle.api.DefaultTask\n        compileDebugAndroidTestJavaWithJavac     org.gradle.api.tasks.compile.JavaCompile\n        compileDebugJavaWithJavac                org.gradle.api.tasks.compile.JavaCompile\n        compileDebugUnitTestJavaWithJavac        org.gradle.api.tasks.compile.JavaCompile\n        compileReleaseJavaWithJavac              org.gradle.api.tasks.compile.JavaCompile\n        compileReleaseUnitTestJavaWithJavac      org.gradle.api.tasks.compile.JavaCompile\n        javaPreCompileDebug                      com.android.build.gradle.tasks.JavaPreCompileTask\n        javaPreCompileDebugAndroidTest           com.android.build.gradle.tasks.JavaPreCompileTask\n        javaPreCompileDebugUnitTest              com.android.build.gradle.tasks.JavaPreCompileTask\n        javaPreCompileRelease                    com.android.build.gradle.tasks.JavaPreCompileTask\n        javaPreCompileReleaseUnitTest            com.android.build.gradle.tasks.JavaPreCompileTask\n        compileLint                              com.android.build.gradle.internal.tasks.LintCompile\n        compileDebugAndroidTestRenderscript      com.android.build.gradle.tasks.RenderscriptCompile\n        compileDebugRenderscript                 com.android.build.gradle.tasks.RenderscriptCompile\n        compileReleaseRenderscript               com.android.build.gradle.tasks.RenderscriptCompile\n        compileDebugAndroidTestShaders           com.android.build.gradle.tasks.ShaderCompile\n        compileDebugShaders                      com.android.build.gradle.tasks.ShaderCompile\n        compileReleaseShaders                    com.android.build.gradle.tasks.ShaderCompile\n\n    Compile tasks tree -------------------------------------------------------- (28 roots)\n\n        [debugAndroidTestAnimalsnifferClassesCollector] ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n            [compileDebugAndroidTestJavaWithJavac]   org.gradle.api.tasks.compile.JavaCompile\n                [compileDebugAndroidTestAidl]            com.android.build.gradle.tasks.AidlCompile\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n                [bundleDebugClassesToCompileJar]         com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                        [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateDebugAndroidTestBuildConfig      (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileDebugAndroidTest]         com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n                processDebugAndroidTestResources         (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileDebugAndroidTestRenderscript]    com.android.build.gradle.tasks.RenderscriptCompile\n                    processDebugAndroidTestManifest          (com.android.build.gradle.tasks.ProcessTestManifest)\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n\n        [debugAnimalsnifferClassesCollector]     ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n            [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                    preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                    preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [debugUnitTestAnimalsnifferClassesCollector] ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n            [compileDebugUnitTestJavaWithJavac]      org.gradle.api.tasks.compile.JavaCompile\n                [bundleDebugClassesToCompileJar]         com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                        [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                [javaPreCompileDebugUnitTest]            com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugUnitTestBuild                    (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [releaseAnimalsnifferClassesCollector]   ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n            [compileReleaseJavaWithJavac]            org.gradle.api.tasks.compile.JavaCompile\n                [compileReleaseAidl]                     com.android.build.gradle.tasks.AidlCompile\n                    preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateReleaseBuildConfig               (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileRelease]                  com.android.build.gradle.tasks.JavaPreCompileTask\n                    preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                processReleaseResources                  (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileReleaseRenderscript]             com.android.build.gradle.tasks.RenderscriptCompile\n                    preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [releaseUnitTestAnimalsnifferClassesCollector] ru.vyarus.gradle.plugin.animalsniffer.util.AndroidClassesCollector\n            [compileReleaseUnitTestJavaWithJavac]    org.gradle.api.tasks.compile.JavaCompile\n                [bundleReleaseClassesToCompileJar]       com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileReleaseJavaWithJavac]            org.gradle.api.tasks.compile.JavaCompile\n                        [compileReleaseAidl]                     com.android.build.gradle.tasks.AidlCompile\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateReleaseBuildConfig               (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileRelease]                  com.android.build.gradle.tasks.JavaPreCompileTask\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processReleaseResources                  (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileReleaseRenderscript]             com.android.build.gradle.tasks.RenderscriptCompile\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                [javaPreCompileReleaseUnitTest]          com.android.build.gradle.tasks.JavaPreCompileTask\n                    preReleaseUnitTestBuild                  (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [bundleDebugAndroidTestClassesToCompileJar] com.android.build.gradle.internal.feature.BundleAllClasses\n            [compileDebugAndroidTestJavaWithJavac]   org.gradle.api.tasks.compile.JavaCompile\n                [compileDebugAndroidTestAidl]            com.android.build.gradle.tasks.AidlCompile\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n                [bundleDebugClassesToCompileJar]         com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                        [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateDebugAndroidTestBuildConfig      (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileDebugAndroidTest]         com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n                processDebugAndroidTestResources         (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileDebugAndroidTestRenderscript]    com.android.build.gradle.tasks.RenderscriptCompile\n                    processDebugAndroidTestManifest          (com.android.build.gradle.tasks.ProcessTestManifest)\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n\n        [bundleDebugAndroidTestClassesToRuntimeJar] com.android.build.gradle.internal.feature.BundleAllClasses\n            [compileDebugAndroidTestJavaWithJavac]   org.gradle.api.tasks.compile.JavaCompile\n                [compileDebugAndroidTestAidl]            com.android.build.gradle.tasks.AidlCompile\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n                [bundleDebugClassesToCompileJar]         com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                        [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateDebugAndroidTestBuildConfig      (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileDebugAndroidTest]         com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n                processDebugAndroidTestResources         (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileDebugAndroidTestRenderscript]    com.android.build.gradle.tasks.RenderscriptCompile\n                    processDebugAndroidTestManifest          (com.android.build.gradle.tasks.ProcessTestManifest)\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n\n        [bundleDebugClassesToRuntimeJar]         com.android.build.gradle.internal.feature.BundleAllClasses\n            [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                    preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                    preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [bundleDebugUnitTestClassesToCompileJar] com.android.build.gradle.internal.feature.BundleAllClasses\n            [compileDebugUnitTestJavaWithJavac]      org.gradle.api.tasks.compile.JavaCompile\n                [bundleDebugClassesToCompileJar]         com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                        [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                [javaPreCompileDebugUnitTest]            com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugUnitTestBuild                    (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [bundleDebugUnitTestClassesToRuntimeJar] com.android.build.gradle.internal.feature.BundleAllClasses\n            [compileDebugUnitTestJavaWithJavac]      org.gradle.api.tasks.compile.JavaCompile\n                [bundleDebugClassesToCompileJar]         com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                        [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                [javaPreCompileDebugUnitTest]            com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugUnitTestBuild                    (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [bundleReleaseClassesToRuntimeJar]       com.android.build.gradle.internal.feature.BundleAllClasses\n            [compileReleaseJavaWithJavac]            org.gradle.api.tasks.compile.JavaCompile\n                [compileReleaseAidl]                     com.android.build.gradle.tasks.AidlCompile\n                    preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateReleaseBuildConfig               (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileRelease]                  com.android.build.gradle.tasks.JavaPreCompileTask\n                    preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                processReleaseResources                  (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileReleaseRenderscript]             com.android.build.gradle.tasks.RenderscriptCompile\n                    preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [bundleReleaseUnitTestClassesToCompileJar] com.android.build.gradle.internal.feature.BundleAllClasses\n            [compileReleaseUnitTestJavaWithJavac]    org.gradle.api.tasks.compile.JavaCompile\n                [bundleReleaseClassesToCompileJar]       com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileReleaseJavaWithJavac]            org.gradle.api.tasks.compile.JavaCompile\n                        [compileReleaseAidl]                     com.android.build.gradle.tasks.AidlCompile\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateReleaseBuildConfig               (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileRelease]                  com.android.build.gradle.tasks.JavaPreCompileTask\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processReleaseResources                  (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileReleaseRenderscript]             com.android.build.gradle.tasks.RenderscriptCompile\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                [javaPreCompileReleaseUnitTest]          com.android.build.gradle.tasks.JavaPreCompileTask\n                    preReleaseUnitTestBuild                  (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [bundleReleaseUnitTestClassesToRuntimeJar] com.android.build.gradle.internal.feature.BundleAllClasses\n            [compileReleaseUnitTestJavaWithJavac]    org.gradle.api.tasks.compile.JavaCompile\n                [bundleReleaseClassesToCompileJar]       com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileReleaseJavaWithJavac]            org.gradle.api.tasks.compile.JavaCompile\n                        [compileReleaseAidl]                     com.android.build.gradle.tasks.AidlCompile\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateReleaseBuildConfig               (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileRelease]                  com.android.build.gradle.tasks.JavaPreCompileTask\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processReleaseResources                  (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileReleaseRenderscript]             com.android.build.gradle.tasks.RenderscriptCompile\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                [javaPreCompileReleaseUnitTest]          com.android.build.gradle.tasks.JavaPreCompileTask\n                    preReleaseUnitTestBuild                  (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [checkDebugAndroidTestDuplicateClasses]  com.android.build.gradle.internal.tasks.CheckDuplicateClassesTask\n            preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n\n        [checkDebugDuplicateClasses]             com.android.build.gradle.internal.tasks.CheckDuplicateClassesTask\n            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [checkReleaseDuplicateClasses]           com.android.build.gradle.internal.tasks.CheckDuplicateClassesTask\n            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [compileDebugArtProfile]                 com.android.build.gradle.internal.tasks.CompileArtProfileTask\n            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n            mergeExtDexDebug                         (com.android.build.gradle.internal.tasks.DexMergingTask)\n            mergeLibDexDebug                         (com.android.build.gradle.internal.tasks.DexMergingTask)\n            mergeProjectDexDebug                     (com.android.build.gradle.internal.tasks.DexMergingTask)\n            mergeDebugArtProfile                     (com.android.build.gradle.internal.tasks.MergeArtProfileTask)\n\n        [compileReleaseArtProfile]               com.android.build.gradle.internal.tasks.CompileArtProfileTask\n            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n            mergeDexRelease                          (com.android.build.gradle.internal.tasks.DexMergingTask)\n            mergeReleaseArtProfile                   (com.android.build.gradle.internal.tasks.MergeArtProfileTask)\n\n        [compileDebugAndroidTestSources]         org.gradle.api.DefaultTask\n            [compileDebugAndroidTestJavaWithJavac]   org.gradle.api.tasks.compile.JavaCompile\n                [compileDebugAndroidTestAidl]            com.android.build.gradle.tasks.AidlCompile\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n                [bundleDebugClassesToCompileJar]         com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                        [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateDebugAndroidTestBuildConfig      (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileDebugAndroidTest]         com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n                processDebugAndroidTestResources         (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileDebugAndroidTestRenderscript]    com.android.build.gradle.tasks.RenderscriptCompile\n                    processDebugAndroidTestManifest          (com.android.build.gradle.tasks.ProcessTestManifest)\n                    preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n\n        [compileDebugSources]                    org.gradle.api.DefaultTask\n            [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                    preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                    preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [compileDebugUnitTestSources]            org.gradle.api.DefaultTask\n            [compileDebugUnitTestJavaWithJavac]      org.gradle.api.tasks.compile.JavaCompile\n                [bundleDebugClassesToCompileJar]         com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileDebugJavaWithJavac]              org.gradle.api.tasks.compile.JavaCompile\n                        [compileDebugAidl]                       com.android.build.gradle.tasks.AidlCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateDebugBuildConfig                 (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileDebug]                    com.android.build.gradle.tasks.JavaPreCompileTask\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processDebugResources                    (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileDebugRenderscript]               com.android.build.gradle.tasks.RenderscriptCompile\n                            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                [javaPreCompileDebugUnitTest]            com.android.build.gradle.tasks.JavaPreCompileTask\n                    preDebugUnitTestBuild                    (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n            processDebugJavaRes                      (com.android.build.gradle.internal.tasks.ProcessJavaResTask)\n            processDebugUnitTestJavaRes              (com.android.build.gradle.internal.tasks.ProcessJavaResTask)\n\n        [compileLintChecks]                      org.gradle.api.DefaultTask\n\n        [compileReleaseSources]                  org.gradle.api.DefaultTask\n            [compileReleaseJavaWithJavac]            org.gradle.api.tasks.compile.JavaCompile\n                [compileReleaseAidl]                     com.android.build.gradle.tasks.AidlCompile\n                    preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                generateReleaseBuildConfig               (com.android.build.gradle.tasks.GenerateBuildConfig)\n                [javaPreCompileRelease]                  com.android.build.gradle.tasks.JavaPreCompileTask\n                    preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                processReleaseResources                  (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                [compileReleaseRenderscript]             com.android.build.gradle.tasks.RenderscriptCompile\n                    preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n\n        [compileReleaseUnitTestSources]          org.gradle.api.DefaultTask\n            [compileReleaseUnitTestJavaWithJavac]    org.gradle.api.tasks.compile.JavaCompile\n                [bundleReleaseClassesToCompileJar]       com.android.build.gradle.internal.feature.BundleAllClasses\n                    [compileReleaseJavaWithJavac]            org.gradle.api.tasks.compile.JavaCompile\n                        [compileReleaseAidl]                     com.android.build.gradle.tasks.AidlCompile\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        generateReleaseBuildConfig               (com.android.build.gradle.tasks.GenerateBuildConfig)\n                        [javaPreCompileRelease]                  com.android.build.gradle.tasks.JavaPreCompileTask\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                        processReleaseResources                  (com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask)\n                        [compileReleaseRenderscript]             com.android.build.gradle.tasks.RenderscriptCompile\n                            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n                [javaPreCompileReleaseUnitTest]          com.android.build.gradle.tasks.JavaPreCompileTask\n                    preReleaseUnitTestBuild                  (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n            processReleaseJavaRes                    (com.android.build.gradle.internal.tasks.ProcessJavaResTask)\n            processReleaseUnitTestJavaRes            (com.android.build.gradle.internal.tasks.ProcessJavaResTask)\n\n        [compileLint]                            com.android.build.gradle.internal.tasks.LintCompile\n\n        [compileDebugAndroidTestShaders]         com.android.build.gradle.tasks.ShaderCompile\n            mergeDebugAndroidTestShaders             (com.android.build.gradle.tasks.MergeSourceSetFolders)\n            preDebugAndroidTestBuild                 (com.android.build.gradle.internal.tasks.TestPreBuildTask)\n\n        [compileDebugShaders]                    com.android.build.gradle.tasks.ShaderCompile\n            preDebugBuild                            (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n            mergeDebugShaders                        (com.android.build.gradle.tasks.MergeSourceSetFolders)\n\n        [compileReleaseShaders]                  com.android.build.gradle.tasks.ShaderCompile\n            preReleaseBuild                          (com.android.build.gradle.internal.tasks.AndroidVariantTask)\n            mergeReleaseShaders                      (com.android.build.gradle.tasks.MergeSourceSetFolders)\n\n    Java compile tasks --------------------------------------------- (5)\n\n        [compileDebugAndroidTestJavaWithJavac] -----\n\n            Sources\n                build/generated/aidl_source_output_dir/debugAndroidTest/out                      NOT EXISTS\n                build/generated/renderscript_source_output_dir/debugAndroidTest/out              NOT EXISTS\n                build/generated/source/buildConfig/androidTest/debug                             NOT EXISTS\n                src/androidTest/java                                                             NOT EXISTS\n                src/androidTestDebug/java                                                        NOT EXISTS\n\n            Output\n                build/generated/ap_generated_sources/debugAndroidTest/out\n                build/intermediates/javac/debugAndroidTest/classes\n                build/tmp/compileDebugAndroidTestJavaWithJavac/previous-compilation-data.bin\n\n            Classpath\n                build/intermediates/compile_and_runtime_not_namespaced_r_class_jar/debugAndroidTest/R.jar\n                build/intermediates/compile_app_classes_jar/debug/classes.jar\n                slf4j-api-1.7.25.jar\n\n        [compileDebugJavaWithJavac] -----\n\n            Sources\n                build/generated/aidl_source_output_dir/debug/out                                 NOT EXISTS\n                build/generated/renderscript_source_output_dir/debug/out                         NOT EXISTS\n                build/generated/source/buildConfig/debug                                         NOT EXISTS\n                src/debug/java                                                                   NOT EXISTS\n                src/main/java\n\n            Output\n                build/generated/ap_generated_sources/debug/out\n                build/intermediates/javac/debug/classes\n                build/tmp/compileDebugJavaWithJavac/previous-compilation-data.bin\n\n            Classpath\n                build/intermediates/compile_and_runtime_not_namespaced_r_class_jar/debug/R.jar\n                slf4j-api-1.7.25.jar\n\n        [compileDebugUnitTestJavaWithJavac] -----\n\n            Sources\n                src/test/java                                                                    NOT EXISTS\n                src/testDebug/java                                                               NOT EXISTS\n\n            Output\n                build/generated/ap_generated_sources/debugUnitTest/out\n                build/intermediates/javac/debugUnitTest/classes\n                build/tmp/compileDebugUnitTestJavaWithJavac/previous-compilation-data.bin\n\n            Classpath\n                build/intermediates/compile_and_runtime_not_namespaced_r_class_jar/debug/R.jar\n                build/intermediates/compile_app_classes_jar/debug/classes.jar\n                slf4j-api-1.7.25.jar\n\n        [compileReleaseJavaWithJavac] -----\n\n            Sources\n                build/generated/aidl_source_output_dir/release/out                               NOT EXISTS\n                build/generated/renderscript_source_output_dir/release/out                       NOT EXISTS\n                build/generated/source/buildConfig/release                                       NOT EXISTS\n                src/main/java\n                src/release/java                                                                 NOT EXISTS\n\n            Output\n                build/generated/ap_generated_sources/release/out\n                build/intermediates/javac/release/classes\n                build/tmp/compileReleaseJavaWithJavac/previous-compilation-data.bin\n\n            Classpath\n                build/intermediates/compile_and_runtime_not_namespaced_r_class_jar/release/R.jar\n                slf4j-api-1.7.25.jar\n\n        [compileReleaseUnitTestJavaWithJavac] -----\n\n            Sources\n                src/test/java                                                                    NOT EXISTS\n                src/testRelease/java                                                             NOT EXISTS\n\n            Output\n                build/generated/ap_generated_sources/releaseUnitTest/out\n                build/intermediates/javac/releaseUnitTest/classes\n                build/tmp/compileReleaseUnitTestJavaWithJavac/previous-compilation-data.bin\n\n            Classpath\n                build/intermediates/compile_and_runtime_not_namespaced_r_class_jar/release/R.jar\n                build/intermediates/compile_app_classes_jar/release/classes.jar\n                slf4j-api-1.7.25.jar\n\n\n== [SourceSets] ===============================================================\n\n    Android application Source Sets ------------------------------------------------------ (12)\n\n        androidTest -----\n            src/androidTest/java                                                             NOT EXISTS\n            src/androidTest/kotlin                                                           NOT EXISTS\n\n        androidTestDebug -----\n            src/androidTestDebug/java                                                        NOT EXISTS\n            src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n        androidTestRelease -----\n            src/androidTestRelease/java                                                      NOT EXISTS\n            src/androidTestRelease/kotlin                                                    NOT EXISTS\n\n        debug ----- (consumed by variant debug)\n            src/debug/java                                                                   NOT EXISTS\n            src/debug/kotlin                                                                 NOT EXISTS\n\n        main ----- (consumed by variant release)\n\n            Sources\n                src/main/java\n                src/main/kotlin                                                                  NOT EXISTS\n\n            Classpath\n                slf4j-api-1.7.25.jar\n\n        release ----- (consumed by variant release)\n            src/release/java                                                                 NOT EXISTS\n            src/release/kotlin                                                               NOT EXISTS\n\n        test -----\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n\n        testDebug -----\n            src/testDebug/java                                                               NOT EXISTS\n            src/testDebug/kotlin                                                             NOT EXISTS\n\n        testFixtures -----\n            src/testFixtures/java                                                            NOT EXISTS\n            src/testFixtures/kotlin                                                          NOT EXISTS\n\n        testFixturesDebug -----\n            src/testFixturesDebug/java                                                       NOT EXISTS\n            src/testFixturesDebug/kotlin                                                     NOT EXISTS\n\n        testFixturesRelease -----\n            src/testFixturesRelease/java                                                     NOT EXISTS\n            src/testFixturesRelease/kotlin                                                   NOT EXISTS\n\n        testRelease -----\n            src/testRelease/java                                                             NOT EXISTS\n            src/testRelease/kotlin                                                           NOT EXISTS\n\n== [Android Variants] ========================================================== (2)\n\n    debug ===== (compiled by compileDebugJavaWithJavac task)\n\n        Source sets (2)\n\n            main -----\n                src/main/java\n                src/main/kotlin                                                                  NOT EXISTS\n\n            debug -----\n                src/debug/java                                                                   NOT EXISTS\n                src/debug/kotlin                                                                 NOT EXISTS\n\n        Output\n            build/intermediates/javac/debug/classes\n\n        Classpath\n            build/intermediates/compile_and_runtime_not_namespaced_r_class_jar/debug/R.jar\n            slf4j-api-1.7.25.jar\n\n    release ===== (compiled by compileReleaseJavaWithJavac task)\n\n        Source sets (2)\n\n            main -----\n                src/main/java\n                src/main/kotlin                                                                  NOT EXISTS\n\n            release -----\n                src/release/java                                                                 NOT EXISTS\n                src/release/kotlin                                                               NOT EXISTS\n\n        Output\n            build/intermediates/javac/release/classes\n\n        Classpath\n            build/intermediates/compile_and_runtime_not_namespaced_r_class_jar/release/R.jar\n            slf4j-api-1.7.25.jar\n\n\\===========================================================================================\n</code></pre>"},{"location":"guide/debug/sources/#configuration","title":"Configuration","text":"<p>The report is giant, but you could disable parts of it:</p> Property Description printPlugins Print registered plugins printPlugins Print compile tasks (with 'compile' and 'classesl in name and tasks tree printSourceSets Print java, android, kotlin source sets printAndroidVariants Print android variants printKotlinTargets Print kotlin multiplatform platforms printClasspath Print classpath in source sets, variants and platforms <p>Task configuration example:</p> <pre><code>printAnimalsnifferSourceInfo.with {\n    printPlugins = false\n    printClasspath = false\n    printCompileTasks = false\n    printAndroidVariants = true\n    printKotlinTargets = false\n}\n</code></pre>"},{"location":"guide/debug/tasks/","title":"Animalsniffer tasks debug","text":"<p><code>printAnimalsnifferTasks</code> shows configurations for all registered animalsniffer tasks (in contrast to debug option, showing data only for a currently executed task). It is useful for checking overall configuration correctness, especially in android projects.</p> <p>Example android output (simple java project output would be too simple):</p> <pre><code>&gt; Task :printAnimalsnifferTasks\n\n\n    animalsnifferDebug                  [default]       for 'debug' android variant\n        report: build/reports/animalsniffer/debug.text\n        depends on: debugAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n            java18-1.0.signature\n        classes:\n            build/intermediates/javac/debug/classes\n        sources:\n            build/generated/aidl_source_output_dir/debug/out                                 NOT EXISTS\n            build/generated/renderscript_source_output_dir/debug/out                         NOT EXISTS\n            build/generated/source/buildConfig/debug\n            src/debug/java                                                                   NOT EXISTS\n            src/debug/kotlin                                                                 NOT EXISTS\n            src/main/java\n            src/main/kotlin                                                                  NOT EXISTS\n\n\n    animalsnifferDebugAndroidTest                       for 'debugAndroidTest' android test component\n        report: build/reports/animalsniffer/debugAndroidTest.text\n        depends on: debugAndroidTestAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n            java18-1.0.signature\n        classes:\n            build/intermediates/javac/debugAndroidTest/classes\n        sources:\n            build/generated/aidl_source_output_dir/debugAndroidTest/out                      NOT EXISTS\n            build/generated/renderscript_source_output_dir/debugAndroidTest/out              NOT EXISTS\n            build/generated/source/buildConfig/androidTest/debug\n            src/androidTest/java                                                             NOT EXISTS\n            src/androidTest/kotlin                                                           NOT EXISTS\n            src/androidTestDebug/java                                                        NOT EXISTS\n            src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n\n    animalsnifferDebugUnitTest                          for 'debugUnitTest' android test component\n        report: build/reports/animalsniffer/debugUnitTest.text\n        depends on: debugUnitTestAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n            java18-1.0.signature\n        classes:\n            &lt;empty&gt;\n        sources:\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n            src/testDebug/java                                                               NOT EXISTS\n            src/testDebug/kotlin                                                             NOT EXISTS\n\n\n    animalsnifferRelease                [default]       for 'release' android variant\n        report: build/reports/animalsniffer/release.text\n        depends on: releaseAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n            java18-1.0.signature\n        classes:\n            build/intermediates/javac/release/classes\n        sources:\n            build/generated/aidl_source_output_dir/release/out                               NOT EXISTS\n            build/generated/renderscript_source_output_dir/release/out                       NOT EXISTS\n            build/generated/source/buildConfig/release\n            src/main/java\n            src/main/kotlin                                                                  NOT EXISTS\n            src/release/java                                                                 NOT EXISTS\n            src/release/kotlin                                                               NOT EXISTS\n\n\n    animalsnifferReleaseUnitTest                        for 'releaseUnitTest' android test component\n        report: build/reports/animalsniffer/releaseUnitTest.text\n        depends on: releaseUnitTestAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n            java18-1.0.signature\n        classes:\n            &lt;empty&gt;\n        sources:\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n            src/testRelease/java                                                             NOT EXISTS\n            src/testRelease/kotlin                                                           NOT EXISTS\n</code></pre> <p>Pay attention to <code>[default]</code> marker - all task with this marker are assigned to <code>check</code> task and so would be executed by default with project build.</p>"},{"location":"guide/signature/build/","title":"Build project signature","text":"<p>Note</p> <p>The primary plugin function is signature checking and check tasks are always registered (build is optional). To prevent a common configuration problem, check tasks fail when no signatures declared for check.  If you use plugin ONLY to build signatures then disable \"no-signatures\" fail to avoid fails: <pre><code>animalsniffer.failWithoutSignatures = false\n</code></pre></p> <p>You can build your own signature. For example, to publish it so other projects could use it for compatibility checks (like with jdk or android).</p> <p>See animalsniffer doc for more possible cases.</p> <p>Signature build task is added only if you configure signature contents:</p> <pre><code>animalsnifferSignature {\n    files sourceSets.main.output\n}\n</code></pre> <p>Now, <code>animalsnifferSignature</code> task may be called to generate a signature for all  your project classes.</p> <p>By default, signature is generated in <code>build/animalsniffer/signature/${project.name}.sig</code> (to be compliant with usual artifacts naming).</p> <p>The signature may be generated from any combinations of:</p> <ul> <li>Compiled classes</li> <li>Jars</li> <li>Other signatures</li> </ul> <p>For example:</p> <pre><code> dependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n    implementation 'junit:junit:4.12'\n    implementation \"org.codehaus.mojo:animal-sniffer-annotations:1.14\"\n}\n\nanimalsnifferSignature {\n    files sourceSets.main.output\n    files configurations.compileClasspath\n\n    signatures configurations.signature\n}\n</code></pre> <p>Generated signature will contain jdk6 signature, project classes and classpath jars. Note that it is not required to use signature configuration to declare signatures: it was used just for simplicity (signature may be defined from any other source).</p> <p><code>files</code> and <code>signatures</code> configuration methods may be called multiple times. Methods accept anything that gradle's <code>Project.files()</code> method would accept (File, URI, gradle FileCollection etc).</p> <p>Pay attention: you may use a signature task to merge existing signatures. Animalsniffer, used under the hood, does not support this case (empty files), so the plugin will work around this by adding plugin jar as files with custom exclusion (to exclude plugin classes from generated signature). Most likely, you will never notice this, as it should be transparent to the end user. It's mentioned just in case if you look info logs (<code>-i</code> gradle option) and note warning message about this.</p>"},{"location":"guide/signature/build/#signature-customization","title":"Signature customization","text":"<p>You may exclude packages from signature:</p> <pre><code>animalsnifferSignature {\n    files sourceSets.main.output\n    exclude 'com.mycompany.somepkg.*'\n}\n</code></pre> <p>Everything in <code>com.mycompany.somepkg</code> package and subpackages will not be included into generated signature.</p> <p>Or you may include only classes from some package:</p> <pre><code>animalsnifferSignature {\n    files sourceSets.main.output\n    include 'com.mycompany.somepkg.*'\n}\n</code></pre> <p>The resulted signature will contain only classes in included package and sub packages.</p> <p>Both methods may be called multiple times. Multiple packages may be configured at once:</p> <pre><code>include 'com.mycompany.somepkg.*', 'com.mycompany.somepkg2.*'\n</code></pre>"},{"location":"guide/signature/build/#signature-name","title":"Signature name","text":"<p>To configure signature name use:</p> <pre><code>animalsnifferSignature {\n    files sourceSets.main.output\n    outputName = 'mySignature'\n}\n</code></pre> <p>For name without extension, default <code>.sig</code> extension will be applied. To override it specify full output name:</p> <pre><code>outputName = 'mySignature.signature'\n</code></pre> <p>Note that by default output name is the same as a project name.</p>"},{"location":"guide/signature/build/#custom-task-configuration","title":"Custom task configuration","text":"<p>You may not use configuration and configure build signature task manually:</p> <pre><code>task sig(type: ru.vyarus.gradle.plugin.animalsniffer.signature.BuildSignatureTask) {\n    files sourceSets.main.output\n    files configurations.compileClasspath\n}\n</code></pre> <p>Task has the same configuration methods as configuration closure described above.</p>"},{"location":"guide/signature/build/#3rd-party-library","title":"3<sup>rd</sup> party library","text":"<p>You can also build signature for any existing jar</p>"},{"location":"guide/signature/build/#review-signature","title":"Review signature","text":"<p>You may use SignatureInfoTask to see generated signature content:</p> <pre><code>animalsnifferSignature {\n    files sourceSets.main.output\n}\n\ntask printSignature(type: ru.vyarus.gradle.plugin.animalsniffer.info.SignatureInfoTask) {\n    signature = tasks.animalsnifferSignature.outputFiles\n    depth = 1\n}\n</code></pre>"},{"location":"guide/signature/build/#configuration","title":"Configuration","text":"<p><code>animalsnifferConfiguration</code> closure methods and properties:</p> Method Description Example files Classes or jars to include into signature files sourceSets.main.output signatures Signatures to include (\"extend from\") signatures configurations.signature include Packages to include include 'some.package.', 'some.other.' exclude Packages to exclude exclude 'some.package.', 'some.other.' outputName Output signature file name. By default, project name is used. '.sig' extension added when no extenion specified outputName = 'myName.sig' debug Log animalsniffer configuration (useful in case of configuration problems) false <p><code>files</code> and <code>signatures</code> are optional, but at least anything must be declared to build signature from. <code>files</code> and <code>signatures</code>  accept everything that Project.files() will accept (URI, File, FileCollection etc).</p> <p>All methods may be called multiple times.</p>"},{"location":"guide/signature/library/","title":"Dependency signatures (library)","text":"<p>Animalsniffer could be used to check compatibility with 3<sup>rd</sup> party libraries.</p>"},{"location":"guide/signature/library/#example","title":"Example","text":"<p>The example is very synthetic but should clearly show how to use signatures for checking compatibility with libraries.</p>"},{"location":"guide/signature/library/#complete-signature","title":"Complete signature","text":"<p>Suppose you're using in your project slf4j-api 1.7.25 and want to be sure that you're also compatible with 1.5.3. We can generate a signature for slf4j 1.5.3 and use it to validate compatibility.</p> <pre><code>plugins {\n    id 'java'\n    id 'ru.vyarus.animalsniffer'\n}\n\n// use custom configuration to build signature            \nconfigurations.create('newsig')\n\ntask sig(type: ru.vyarus.gradle.plugin.animalsniffer.signature.BuildSignatureTask) {\n    // (optional) build slf4j signature as an extension to jdk signature\n    signatures configurations.signature\n    files configurations.newsig\n}\n\nanimalsniffer {\n    // use generated signature instead of configuration\n    signatures = sig.outputFiles\n    excludeJars 'slf4j-*'\n}                        \n\nrepositories { mavenCentral()}\ndependencies {\n    // this signature is used only to build custom signature, but not in check directly\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n    // dependency that must to be excluded to be able to check with newly generated signature\n    implementation 'org.slf4j:slf4j-api:1.7.25'\n\n    // configuration used only to build signature\n    newsig 'org.slf4j:slf4j-api:1.5.3'\n}\n</code></pre> <p>Here we use custom configuration to get old slf4j version and build jdk+old slf4j signature with the custom task. Custom signature is used for check.</p> <p>Note</p> <p>that it is important to exclude library jar, otherwise signature will not detect anything (real jar will mark all usages as valid).</p> <p>If we run check on class:</p> <pre><code>public class Sample {\n    public static void main(String[] args) {\n        // api present in 1.5.3 (line must not be errored)\n        LoggerFactory.getLogger(\"goodapi\");\n        // method appear in 1.5.4\n        MarkerFactory.getMarker(\"sample\").hasReferences();\n    }\n}\n</code></pre> <p>It will detect api change:</p> <pre><code>[Undefined reference] custsig.(Sample.java:12)\n  &gt;&gt; boolean org.slf4j.Marker.hasReferences()\n</code></pre>"},{"location":"guide/signature/library/#partial-signature","title":"Partial signature","text":"<p>Most likely, small library signature would be built without jdk (library signature only). In such case, we would need to merge our required jdk signature with small library signature (it is required because if we use just a small signature, all jdk classes usages will be treated as violations).</p> <p>Note that you may base on android signature or use library signature in both android and java projects. This makes small signature re-usable.</p> <p>Cache task is not merging signatures by default because commonly complete signatures are used (jdk, android) and merge is not desired. But it can merge signatures. Modified first example:</p> <pre><code>plugins {\n    id 'java'\n    id 'ru.vyarus.animalsniffer'\n}\n\n// creating signature just for slf4j library\nconfigurations.create('newsig')\ntask sig(type: ru.vyarus.gradle.plugin.animalsniffer.signature.BuildSignatureTask) {\n    files configurations.newsig\n}\n\nanimalsniffer {\n    // using both signatures for check\n    signatures = files(configurations.signature, sig.outputFiles)\n    excludeJars 'slf4j-*'\n    cache {\n        enabled = true\n\n        // cache would merge signatures into single signature\n        mergeSignatures = true\n    }\n}                        \n\nrepositories { mavenCentral()}\ndependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n    // dependency that must to be excluded to be able to check with newly generated signatire\n    implementation 'org.slf4j:slf4j-api:1.7.25'\n\n    // configuration used only to build signature\n    newsig 'org.slf4j:slf4j-api:1.5.3'\n}\n</code></pre> <p>If library signature is published into maven repository, the configuration will become:</p> <pre><code>plugins {\n    id 'java'\n    id 'ru.vyarus.animalsniffer'\n}\n\nanimalsniffer {\n    excludeJars 'slf4j-*'\n    cache {\n        enabled = true\n        mergeSignatures = true\n    }\n}                        \n\nrepositories { mavenCentral()}\ndependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n    // note this is not real, but just to show the idea - all signatures configured in one place\n    signature 'org.slf4j:slf4j-api:1.5.3@signature'\n\n    implementation 'org.slf4j:slf4j-api:1.7.25'\n}\n</code></pre>"},{"location":"guide/signature/library/#partial-without-cache","title":"Partial without cache","text":"<p>In some situations, the cache could not be used.</p> <p>For example, if you want to check with both jdk and android and need to use library  signature. In this case, cache would merge everything, which is not desirable.  For such cases, use custom signature tasks to build custom signatures  (as in the first example).</p> <p>Another caveat is possible signature build conflict. In this case, custom build tasks would also help.</p>"},{"location":"guide/signature/library/#configuration","title":"Configuration","text":""},{"location":"guide/signature/library/#jar-exclude","title":"Jar exclude","text":"<p>As shown above, you need to exclude jars, covered with library signatures.</p> <pre><code>animalsniffer {\n    excludeJars 'slf4j-*'\n}\n</code></pre> <p>Excluding occurs on classpath jars. Jar files are matched without extension. Convention for classpath file names is <code>artifactId-version</code>.</p> <p>For example, slf4j jar would be <code>slf4j-api-1.5.3.jar</code>, but pattern would be matched with <code>slf4j-api-1.5.3</code>.</p> <p>Patterns are actually regular expressions, but in most cases this is not required and that's why '*' symbol is supported: it is replaced to '.+'. By definition above, <code>slf4j-.+</code> regexp will be used for matching.</p> <p>Many patterns could be declared:</p> <pre><code>excludeJars 'slf4j-*', 'some-*'\n</code></pre> <p>Configuration method could be called multiple times (addition):</p> <pre><code>excludeJars 'slf4j-*', 'some-*'\nexcludeJars 'other-*'\n</code></pre> <p>Property may be configured directly, but it would override previous values:</p> <pre><code>excludeJars = ['slf4j-*', 'some-*']\n</code></pre>"},{"location":"guide/signature/library/#signatures","title":"Signatures","text":"<p>Use project.files() to group multiple file sets (or specify separate files, url etc).</p> <pre><code>animalsniffer {\n    signatures = files(configurations.signature, sig.outputFiles)\n}\n</code></pre> <p>Note that working with FileCollection allows evaluating files lazily. In the example  above, <code>sig.outputFiles</code> files do not exist in the configuration time, but as  it's a lazy collection, files being resolved correctly. Moreover, using this method  puts implicit depdendency on task. <code>project.files()</code> preserve laziness when merging  multiple collections.</p> <p>Note</p> <p>Do not rely on build task outputs, because task declares only output directory  and <code>task.outputs.files</code> will contain ONLY directory itself.  Use the special method instead: <code>task.getOutputFiles()</code> </p>"},{"location":"guide/use/android/","title":"Check android project","text":"<p>For android project (<code>com.android.library</code> or <code>com.android.application</code> plugins version 7.4.0 or above) animalsniffer tasks created for variants and test components.</p> <p>Example:</p> <pre><code>plugins {\n    id 'com.android.application' version '7.4.0' // or recent 8.x\n    id 'ru.vyarus.animalsniffer' version \"2.0.1\"\n}\n\nandroid { ... }\n\ndependencies {\n    signature 'net.sf.androidscents.signature:android-api-level-21:5.0.1_r2@signature'\n}\n</code></pre> <p>Part of print sources task output:</p> <pre><code>== [SourceSets] ===============================================================\n\n    Android application Source Sets ------------------------------------------------------ (12)\n\n        androidTest ----- (consumed by test component debugAndroidTest)\n            src/androidTest/java                                                             NOT EXISTS\n            src/androidTest/kotlin                                                           NOT EXISTS\n\n        androidTestDebug ----- (consumed by test component debugAndroidTest)\n            src/androidTestDebug/java                                                        NOT EXISTS\n            src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n        androidTestRelease -----\n            src/androidTestRelease/java                                                      NOT EXISTS\n            src/androidTestRelease/kotlin                                                    NOT EXISTS\n\n        debug ----- (consumed by variant debug)\n            src/debug/java                                                                   NOT EXISTS\n            src/debug/kotlin                                                                 NOT EXISTS\n\n        main ----- (consumed by variant release)\n            src/main/java\n            src/main/kotlin                                                                  NOT EXISTS\n\n        release ----- (consumed by variant release)\n            src/release/java                                                                 NOT EXISTS\n            src/release/kotlin                                                               NOT EXISTS\n\n        test ----- (consumed by unit test component releaseUnitTest)\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n\n        testDebug ----- (consumed by unit test component debugUnitTest)\n            src/testDebug/java                                                               NOT EXISTS\n            src/testDebug/kotlin                                                             NOT EXISTS\n\n        testFixtures -----\n            src/testFixtures/java                                                            NOT EXISTS\n            src/testFixtures/kotlin                                                          NOT EXISTS\n\n        testFixturesDebug -----\n            src/testFixturesDebug/java                                                       NOT EXISTS\n            src/testFixturesDebug/kotlin                                                     NOT EXISTS\n\n        testFixturesRelease -----\n            src/testFixturesRelease/java                                                     NOT EXISTS\n            src/testFixturesRelease/kotlin                                                   NOT EXISTS\n\n        testRelease ----- (consumed by unit test component releaseUnitTest)\n            src/testRelease/java                                                             NOT EXISTS\n            src/testRelease/kotlin                                                           NOT EXISTS\n\n== [Android Variants] ========================================================== (5)\n\n    debug ===== (compiled by compileDebugJavaWithJavac task)\n\n        Source sets (2)\n\n            main -----\n                src/main/java\n                src/main/kotlin                                                                  NOT EXISTS\n\n            debug -----\n                src/debug/java                                                                   NOT EXISTS\n                src/debug/kotlin                                                                 NOT EXISTS\n\n    release ===== (compiled by compileReleaseJavaWithJavac task)\n\n        Source sets (2)\n\n            main -----\n                src/main/java\n                src/main/kotlin                                                                  NOT EXISTS\n\n            release -----\n                src/release/java                                                                 NOT EXISTS\n                src/release/kotlin                                                               NOT EXISTS\n\n    debugAndroidTest ===== (compiled by compileDebugAndroidTestJavaWithJavac task)\n\n        Source sets (2)\n\n            androidTest -----\n                src/androidTest/java                                                             NOT EXISTS\n                src/androidTest/kotlin                                                           NOT EXISTS\n\n            androidTestDebug -----\n                src/androidTestDebug/java                                                        NOT EXISTS\n                src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n    debugUnitTest ===== (compiled by compileDebugUnitTestJavaWithJavac task)\n\n        Source sets (2)\n\n            test -----\n                src/test/java                                                                    NOT EXISTS\n                src/test/kotlin                                                                  NOT EXISTS\n\n            testDebug -----\n                src/testDebug/java                                                               NOT EXISTS\n                src/testDebug/kotlin                                                             NOT EXISTS\n\n    releaseUnitTest ===== (compiled by compileReleaseUnitTestJavaWithJavac task)\n\n        Source sets (2)\n\n            test -----\n                src/test/java                                                                    NOT EXISTS\n                src/test/kotlin                                                                  NOT EXISTS\n\n            testRelease -----\n                src/testRelease/java                                                             NOT EXISTS\n                src/testRelease/kotlin                                                           NOT EXISTS\n</code></pre> <p>Important</p> <p>Fixture sources aren't covered by variants (will not be checked).</p> <p>In the example above, we have 2 variants and 3 test components: 'debug', 'release', 'debugAndroidTest', 'debugUnitTest' and 'releaseUnitTest'. So the following animalsniffer tasks would be created: <code>animalsnifferDebug</code>, <code>animalsnifferRelease</code>, <code>animalsnifferDebugAndroidTest</code>,  <code>animalsnifferDebugUnitTest</code> and <code>animalsnifferReleaseUnitTest</code></p> <p>This could also be seen with print animalsniffer tasks task:</p> <pre><code>&gt; Task :printAnimalsnifferTasks\n\n\n    animalsnifferDebug                  [default]       for 'debug' android variant\n        report: build/reports/animalsniffer/debug.text\n        depends on: debugAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n        classes:\n            build/intermediates/javac/debug/classes\n        sources:\n            build/generated/aidl_source_output_dir/debug/out                                 NOT EXISTS\n            build/generated/renderscript_source_output_dir/debug/out                         NOT EXISTS\n            build/generated/source/buildConfig/debug\n            src/debug/java                                                                   NOT EXISTS\n            src/debug/kotlin                                                                 NOT EXISTS\n            src/main/java\n            src/main/kotlin                                                                  NOT EXISTS\n\n\n    animalsnifferDebugAndroidTest                       for 'debugAndroidTest' android test component\n        report: build/reports/animalsniffer/debugAndroidTest.text\n        depends on: debugAndroidTestAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n        classes:\n            build/intermediates/javac/debugAndroidTest/classes\n        sources:\n            build/generated/aidl_source_output_dir/debugAndroidTest/out                      NOT EXISTS\n            build/generated/renderscript_source_output_dir/debugAndroidTest/out              NOT EXISTS\n            build/generated/source/buildConfig/androidTest/debug\n            src/androidTest/java                                                             NOT EXISTS\n            src/androidTest/kotlin                                                           NOT EXISTS\n            src/androidTestDebug/java                                                        NOT EXISTS\n            src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n\n    animalsnifferDebugUnitTest                          for 'debugUnitTest' android test component\n        report: build/reports/animalsniffer/debugUnitTest.text\n        depends on: debugUnitTestAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n        classes:\n            &lt;empty&gt;\n        sources:\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n            src/testDebug/java                                                               NOT EXISTS\n            src/testDebug/kotlin                                                             NOT EXISTS\n\n\n    animalsnifferRelease                [default]       for 'release' android variant\n        report: build/reports/animalsniffer/release.text\n        depends on: releaseAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n        classes:\n            build/intermediates/javac/release/classes\n        sources:\n            build/generated/aidl_source_output_dir/release/out                               NOT EXISTS\n            build/generated/renderscript_source_output_dir/release/out                       NOT EXISTS\n            build/generated/source/buildConfig/release\n            src/main/java\n            src/main/kotlin                                                                  NOT EXISTS\n            src/release/java                                                                 NOT EXISTS\n            src/release/kotlin                                                               NOT EXISTS\n\n\n    animalsnifferReleaseUnitTest                        for 'releaseUnitTest' android test component\n        report: build/reports/animalsniffer/releaseUnitTest.text\n        depends on: releaseUnitTestAnimalsnifferClassesCollector\n        signatures: \n            android-api-level-21-5.0.1_r2.signature\n        classes:\n            &lt;empty&gt;\n        sources:\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n            src/testRelease/java                                                             NOT EXISTS\n            src/testRelease/kotlin                                                           NOT EXISTS\n</code></pre> <p>Note</p> <p><code>[default]</code> indicates tasks executed with build</p> <p>Tip</p> <p>Use <code>animalsniffer.debug = true</code> to see class files, checked by animalsniffer task</p>"},{"location":"guide/use/android/#changing-default-tasks","title":"Changing default tasks","text":"<p>In many android projects, <code>debug</code> and <code>release</code> variants contain the same sources, so it makes sense to run only one check during the build:</p> <pre><code>animalsniffer {\n    defaultTargets = ['debug']\n}\n</code></pre> <p>or with method</p> <pre><code>animalsniffer {\n    defaultTargets 'debug'\n}\n</code></pre> <p>Tip</p> <p>If you want to avoid all animalsniffer tasks: <pre><code>defaultTargets = []\n</code></pre></p>"},{"location":"guide/use/android/#test-tasks","title":"Test tasks","text":"<p>Test sources are not checked by default. If you want to check test sources:</p> <pre><code>animalsniffer {\n    checkTestSources = true\n}\n</code></pre> <p>After that <code>defaultTargets</code> option could be used to limit test tasks. </p>"},{"location":"guide/use/android/#support-specifics","title":"Support specifics","text":"<p>New android api requires a task to get access to android sources location (android plugin configures task - no way  to just get required information). </p> <p>That's why additional tasks registered only for collecting android configuration: <code>debugAnimalsnifferClassesCollector</code>, <code>releaseAnimalsnifferClassesCollector</code>, <code>debugAndroidTestAnimalsnifferClassesCollector</code> etc.</p> <p>These tasks do nothing - they just receive required configurations to be used in animalsniffer task.</p>"},{"location":"guide/use/java/","title":"Check JVM language","text":"<p>For JVM languages (java, groovy, kotlin, scala, etc) which plugin is based <code>java</code> plugin  (based on source sets), animalsniffer check tasks registered per source set.</p> <p>In the simplest case:</p> <pre><code>plugins {\n    id 'java' // kotlin, scala, groovy\n    id 'ru.vyarus.animalsniffer' version \"2.0.1\"\n}\n\ndependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n}\n</code></pre> <p>Part of print sources task output:</p> <pre><code>== [SourceSets] ===============================================================\n\n    Java Source Sets ------------------------------------------------------- (2)\n\n        main -----\n\n            Sources\n                src/main/java\n\n            Output\n                build/classes/java/main\n                build/resources/main\n\n        test -----\n\n            Sources\n                src/test/java                                                                    NOT EXISTS\n\n            Output\n                build/classes/java/test\n                build/resources/test\n</code></pre> <p>We have 2 source sets: 'main' and 'test' and so two animalsniffer check tasks created: <code>animlasnifferMain</code> and <code>animalsnifferTest</code>.</p> <p>Due to <code>animalsniffer.checkTestSources = false</code> (by default) only <code>animalsnifferMain</code> is attached to check and so would be executed with each build.</p> <p>This could also be seen with print animalsniffer tasks task:</p> <pre><code>&gt; Task :printAnimalsnifferTasks\n\n\n    animalsnifferMain                   [default]       for 'main' source set\n        report: build/reports/animalsniffer/main.text\n        depends on: classes\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/java/main\n        sources:\n            src/main/java\n\n\n    animalsnifferTest                                   for 'test' source set\n        report: build/reports/animalsniffer/test.text\n        depends on: testClasses\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/java/test\n        sources:\n            src/test/java                                                                    NOT EXISTS\n</code></pre> <p>Note</p> <p><code>[default]</code> indicates tasks executed with build</p> <p>Tip</p> <p>Use <code>animalsniffer.debug = true</code> to see class files, checked by animalsniffer task</p>"},{"location":"guide/use/java/#changing-default-tasks","title":"Changing default tasks","text":"<p>For example, suppose we have two more source sets:</p> <pre><code>sourceSets {\n    other {\n        java { srcDir(\"src/other/java\")}\n    }\n    integrationTests {\n        java { srcDir(\"src/itest/java\")}\n    }\n}\n</code></pre> <p>Then, by default, two animalsniffer tasks would be attached to <code>check</code>: <code>animalsnifferMain</code>, <code>animalsnifferOther</code>. If you want to exclude task for \"other\" source set:</p> <pre><code>animalsniffer {\n    defaultTargets = ['main']\n}\n</code></pre> <p>or with method</p> <pre><code>animalsniffer {\n    defaultTargets 'main'\n}\n</code></pre> <p>Tip</p> <p>If you want to avoid all animalsniffer tasks: <pre><code>defaultTargets = []\n</code></pre></p>"},{"location":"guide/use/java/#deprecated-config","title":"Deprecated config","text":"<p>Animalsniffer plugin was initially written in the same manner as other gradle quality plugins (checkstyle, pmd etc.) All these plugins are configured with <code>sourceSets</code> option. Plugin could use this configuration too:</p> <pre><code>animalsniffer {\n    sourceSets = [sourceSets.main]\n}\n</code></pre> <p>But this configuration is considered DEPRECATED because it is clumsy (especially in kotlin) and plugin now supports android and kotlin multiplatform, which are not based on source sets.</p> <p>Strings-based <code>defaultTargets</code> configuration (presented above) is universal for all types of projects  and should be more comfortable to use</p>"},{"location":"guide/use/java/#test-tasks","title":"Test tasks","text":"<p>Test sources are not checked by default. If you want to check test sources:</p> <pre><code>animalsniffer {\n    checkTestSources = true\n}\n</code></pre> <p>After that <code>defaultTargets</code> option could be used to limit test tasks. </p>"},{"location":"guide/use/multiplatform/","title":"Check kotlin multiplatform","text":"<p>For kotlin multiplatform project (<code>org.jetbrains.kotlin.multiplatform</code> plugin version 1.7.0 or above) animalsniffer tasks created for platform compilations, except android platform (see below) and metadata platform (because it's sources always included in other platforms).</p>"},{"location":"guide/use/multiplatform/#examples","title":"Examples","text":"<p>To better understand how multipltaform sources organized, lets look into 3 cases:</p> <ol> <li>Only one platform declared (the simplest)</li> <li>Multiple platforms declared</li> <li>Android platform declared (android plugin also enabled)</li> </ol>"},{"location":"guide/use/multiplatform/#single-platform-example","title":"Single platform example","text":"<pre><code>plugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '2.0.21'\n    id 'ru.vyarus.animalsniffer' version \"2.0.1\"\n}\n\nkotlin {\n    jvm()\n}\n\ndependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n}\n</code></pre> <p>Note</p> <p>It is not required to enable <code>.withJava()</code> (was required in the previous plugin versions)</p> <p>Part of print sources task output: <pre><code>== [SourceSets] ===============================================================\n\n    Kotlin Multiplatform Source Sets ------------------------------------------------------- (4)\n\n        commonMain ----- (consumed by compilation 'main' (target metadata (common)))\n            src/commonMain/kotlin                                                            NOT EXISTS\n\n        commonTest ----- (consumed by compilation 'test' (target jvm (jvm)))\n            src/commonTest/kotlin                                                            NOT EXISTS\n\n        jvmMain ----- (consumed by compilation 'main' (target jvm (jvm)))\n            src/jvmMain/kotlin\n\n        jvmTest ----- (consumed by compilation 'test' (target jvm (jvm)))\n            src/jvmTest/kotlin                                                               NOT EXISTS\n\n== [Kotlin targets] ========================================================= (2)\n\n    jvm ----- (jvm platform, 2 compilations)\n\n        compilation 'main' (target jvm (jvm)) (compiled by jvmMainClasses task)\n\n            Source sets (2)\n\n                jvmMain -----\n                    src/jvmMain/kotlin\n\n                commonMain -----\n                    src/commonMain/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/jvm/main\n\n        compilation 'test' (target jvm (jvm)) (compiled by jvmTestClasses task)\n\n            Source sets (2)\n\n                jvmTest -----\n                    src/jvmTest/kotlin                                                               NOT EXISTS\n\n                commonTest -----\n                    src/commonTest/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/jvm/test\n\n            Associated compilations (1)\n                main\n\n    metadata ----- (common platform, 1 compilations)\n\n        compilation 'main' (target metadata (common)) (compiled by metadataMainClasses task)\n\n            Source sets (1)\n\n                commonMain -----\n                    src/commonMain/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/metadata/main\n</code></pre></p> <p>Only 2 animalsniffer tasks would be created for jvm platform: <code>animalsnifferJvmMain</code> and <code>animalsnifferJvmTest</code> ('common' platform sources are already included into jvm platform).</p> <p>This could also be seen with print animalsniffer tasks task:</p> <pre><code>&gt; Task :printAnimalsnifferTasks\n\n\n    animalsnifferJvmMain                [default]       for kotlin platform 'jvm' compilation 'main'\n        report: build/reports/animalsniffer/jvmMain.text\n        depends on: jvmMainClasses\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/kotlin/jvm/main\n        sources:\n            src/commonMain/kotlin                                                            NOT EXISTS\n            src/jvmMain/kotlin\n\n\n    animalsnifferJvmTest                                for kotlin platform 'jvm' compilation 'test'\n        report: build/reports/animalsniffer/jvmTest.text\n        depends on: jvmTestClasses\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/kotlin/jvm/test\n        sources:\n            src/commonTest/kotlin                                                            NOT EXISTS\n            src/jvmTest/kotlin                                                               NOT EXISTS\n</code></pre> <p>Note</p> <p><code>[default]</code> indicates tasks executed with build</p> <p>Tip</p> <p>Use <code>animalsniffer.debug = true</code> to see class files, checked by animalsniffer task</p>"},{"location":"guide/use/multiplatform/#multiple-platforms-example","title":"Multiple platforms example:","text":"<pre><code>plugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '2.0.21'\n    id 'ru.vyarus.animalsniffer' version \"2.0.1\"\n}\n\nkotlin {\n    jvm()\n\n    js {\n        browser()\n    }\n}\n\ndependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n}\n</code></pre> <p>Part of print sources task output: <pre><code>== [SourceSets] ===============================================================\n\n    Kotlin Multiplatform Source Sets ------------------------------------------------------- (6)\n\n        commonMain ----- (consumed by compilation 'main' (target metadata (common)))\n            src/commonMain/kotlin                                                            NOT EXISTS\n\n        commonTest ----- (consumed by compilation 'test' (target jvm (jvm)))\n            src/commonTest/kotlin                                                            NOT EXISTS\n\n        jsMain ----- (consumed by compilation 'main' (target js (js)))\n            src/jsMain/kotlin                                                                NOT EXISTS\n\n        jsTest ----- (consumed by compilation 'test' (target js (js)))\n            src/jsTest/kotlin                                                                NOT EXISTS\n\n        jvmMain ----- (consumed by compilation 'main' (target jvm (jvm)))\n            src/jvmMain/kotlin\n\n        jvmTest ----- (consumed by compilation 'test' (target jvm (jvm)))\n            src/jvmTest/kotlin                                                               NOT EXISTS\n\n== [Kotlin targets] ========================================================= (3)\n\n    js ----- (js platform, 2 compilations)\n\n        compilation 'main' (target js (js)) (compiled by jsMainClasses task)\n\n            Source sets (2)\n\n                jsMain -----\n                    src/jsMain/kotlin                                                                NOT EXISTS\n\n                commonMain -----\n                    src/commonMain/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/js/main\n\n        compilation 'test' (target js (js)) (compiled by jsTestClasses task)\n\n            Source sets (2)\n\n                jsTest -----\n                    src/jsTest/kotlin                                                                NOT EXISTS\n\n                commonTest -----\n                    src/commonTest/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/js/test\n\n            Associated compilations (1)\n                main\n\n    jvm ----- (jvm platform, 2 compilations)\n\n        compilation 'main' (target jvm (jvm)) (compiled by jvmMainClasses task)\n\n            Source sets (2)\n\n                jvmMain -----\n                    src/jvmMain/kotlin\n\n                commonMain -----\n                    src/commonMain/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/jvm/main\n\n        compilation 'test' (target jvm (jvm)) (compiled by jvmTestClasses task)\n\n            Source sets (2)\n\n                jvmTest -----\n                    src/jvmTest/kotlin                                                               NOT EXISTS\n\n                commonTest -----\n                    src/commonTest/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/jvm/test\n\n            Associated compilations (1)\n                main\n\n    metadata ----- (common platform, 2 compilations)\n\n        compilation 'commonMain' (target metadata (common)) (compiled by metadataCommonMainClasses task)\n\n            Source sets (1)\n\n                commonMain -----\n                    src/commonMain/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/metadata/commonMain\n\n        compilation 'main' (target metadata (common)) (compiled by metadataMainClasses task)\n\n            Source sets (1)\n\n                commonMain -----\n                    src/commonMain/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/metadata/main\n</code></pre></p> <p>Print animalsniffer tasks task: <pre><code>&gt; Task :printAnimalsnifferTasks\n\n\n    animalsnifferJsMain                 [default]       for kotlin platform 'js' compilation 'main'\n        report: build/reports/animalsniffer/jsMain.text\n        depends on: jsMainClasses\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/kotlin/js/main\n        sources:\n            src/commonMain/kotlin                                                            NOT EXISTS\n            src/jsMain/kotlin                                                                NOT EXISTS\n\n\n    animalsnifferJsTest                                 for kotlin platform 'js' compilation 'test'\n        report: build/reports/animalsniffer/jsTest.text\n        depends on: jsTestClasses\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/kotlin/js/test\n        sources:\n            src/commonTest/kotlin                                                            NOT EXISTS\n            src/jsTest/kotlin                                                                NOT EXISTS\n\n\n    animalsnifferJvmMain                [default]       for kotlin platform 'jvm' compilation 'main'\n        report: build/reports/animalsniffer/jvmMain.text\n        depends on: jvmMainClasses\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/kotlin/jvm/main\n        sources:\n            src/commonMain/kotlin                                                            NOT EXISTS\n            src/jvmMain/kotlin\n\n\n    animalsnifferJvmTest                                for kotlin platform 'jvm' compilation 'test'\n        report: build/reports/animalsniffer/jvmTest.text\n        depends on: jvmTestClasses\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/classes/kotlin/jvm/test\n        sources:\n            src/commonTest/kotlin                                                            NOT EXISTS\n            src/jvmTest/kotlin                                                               NOT EXISTS\n</code></pre></p>"},{"location":"guide/use/multiplatform/#android-platform-example","title":"Android platform example","text":"<p>Kotlin multiplatform support does not create tasks for android platform: android plugin support used instead (with just a few missed kotlin sources added to animalsniffer tasks).</p> <pre><code>plugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '2.0.21'\n    id 'com.android.application' version '8.4.0'                \n    id 'ru.vyarus.animalsniffer' version \"2.0.1\"\n}\n\nkotlin {\n    androidTarget()\n\n    android { ... }\n}\n\ndependencies {\n    signature 'org.codehaus.mojo.signature:java16-sun:1.0@signature'\n}\n</code></pre> <p>Part of print sources task output: <pre><code>== [SourceSets] ===============================================================\n\n    Kotlin Multiplatform Source Sets ------------------------------------------------------- (10)\n\n        androidDebug ----- (consumed by compilation 'debug' (target android (androidJvm)))\n            src/androidDebug/kotlin                                                          NOT EXISTS\n            src/debug/java                                                                   NOT EXISTS\n            src/debug/kotlin                                                                 NOT EXISTS\n\n        androidInstrumentedTest ----- (consumed by compilation 'debugAndroidTest' (target android (androidJvm)))\n            src/androidInstrumentedTest/kotlin                                               NOT EXISTS\n            src/androidTest/java                                                             NOT EXISTS\n            src/androidTest/kotlin                                                           NOT EXISTS\n\n        androidInstrumentedTestDebug ----- (consumed by compilation 'debugAndroidTest' (target android (androidJvm)))\n            src/androidInstrumentedTestDebug/kotlin                                          NOT EXISTS\n            src/androidTestDebug/java                                                        NOT EXISTS\n            src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n        androidMain ----- (consumed by compilation 'release' (target android (androidJvm)))\n            src/androidMain/kotlin\n            src/main/java                                                                    NOT EXISTS\n            src/main/kotlin                                                                  NOT EXISTS\n\n        androidRelease ----- (consumed by compilation 'release' (target android (androidJvm)))\n            src/androidRelease/kotlin                                                        NOT EXISTS\n            src/release/java                                                                 NOT EXISTS\n            src/release/kotlin                                                               NOT EXISTS\n\n        androidUnitTest ----- (consumed by compilation 'releaseUnitTest' (target android (androidJvm)))\n            src/androidUnitTest/kotlin                                                       NOT EXISTS\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n\n        androidUnitTestDebug ----- (consumed by compilation 'debugUnitTest' (target android (androidJvm)))\n            src/androidUnitTestDebug/kotlin                                                  NOT EXISTS\n            src/testDebug/java                                                               NOT EXISTS\n            src/testDebug/kotlin                                                             NOT EXISTS\n\n        androidUnitTestRelease ----- (consumed by compilation 'releaseUnitTest' (target android (androidJvm)))\n            src/androidUnitTestRelease/kotlin                                                NOT EXISTS\n            src/testRelease/java                                                             NOT EXISTS\n            src/testRelease/kotlin                                                           NOT EXISTS\n\n        commonMain ----- (consumed by compilation 'main' (target metadata (common)))\n            src/commonMain/kotlin                                                            NOT EXISTS\n\n        commonTest ----- (consumed by compilation 'releaseUnitTest' (target android (androidJvm)))\n            src/commonTest/kotlin                                                            NOT EXISTS\n\n    Android sources NOT COVERED by kotlin source sets\n        src/androidTestRelease/java                                            (androidTestRelease)\n        src/androidTestRelease/kotlin                                          (androidTestRelease)\n        src/testFixtures/java                                                  (testFixtures)\n        src/testFixtures/kotlin                                                (testFixtures)\n        src/testFixturesDebug/java                                             (testFixturesDebug)\n        src/testFixturesDebug/kotlin                                           (testFixturesDebug)\n        src/testFixturesRelease/java                                           (testFixturesRelease)\n        src/testFixturesRelease/kotlin                                         (testFixturesRelease)\n\n    Android application Source Sets ------------------------------------------------------ (12)\n\n        androidTest ----- (consumed by test component debugAndroidTest)\n            src/androidInstrumentedTest/kotlin                                               NOT EXISTS\n            src/androidTest/java                                                             NOT EXISTS\n            src/androidTest/kotlin                                                           NOT EXISTS\n\n        androidTestDebug ----- (consumed by test component debugAndroidTest)\n            src/androidInstrumentedTestDebug/kotlin                                          NOT EXISTS\n            src/androidTestDebug/java                                                        NOT EXISTS\n            src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n        androidTestRelease -----\n            src/androidTestRelease/java                                                      NOT EXISTS\n            src/androidTestRelease/kotlin                                                    NOT EXISTS\n\n        debug ----- (consumed by variant debug)\n            src/androidDebug/kotlin                                                          NOT EXISTS\n            src/debug/java                                                                   NOT EXISTS\n            src/debug/kotlin                                                                 NOT EXISTS\n\n        main ----- (consumed by variant release)\n\n            Sources\n                src/androidMain/kotlin\n                src/main/java                                                                    NOT EXISTS\n                src/main/kotlin                                                                  NOT EXISTS\n\n            Classpath\n                slf4j-api-1.7.25.jar\n\n        release ----- (consumed by variant release)\n            src/androidRelease/kotlin                                                        NOT EXISTS\n            src/release/java                                                                 NOT EXISTS\n            src/release/kotlin                                                               NOT EXISTS\n\n        test ----- (consumed by unit test component releaseUnitTest)\n            src/androidUnitTest/kotlin                                                       NOT EXISTS\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n\n        testDebug ----- (consumed by unit test component debugUnitTest)\n            src/androidUnitTestDebug/kotlin                                                  NOT EXISTS\n            src/testDebug/java                                                               NOT EXISTS\n            src/testDebug/kotlin                                                             NOT EXISTS\n\n        testFixtures -----\n            src/testFixtures/java                                                            NOT EXISTS\n            src/testFixtures/kotlin                                                          NOT EXISTS\n\n        testFixturesDebug -----\n            src/testFixturesDebug/java                                                       NOT EXISTS\n            src/testFixturesDebug/kotlin                                                     NOT EXISTS\n\n        testFixturesRelease -----\n            src/testFixturesRelease/java                                                     NOT EXISTS\n            src/testFixturesRelease/kotlin                                                   NOT EXISTS\n\n        testRelease ----- (consumed by unit test component releaseUnitTest)\n            src/androidUnitTestRelease/kotlin                                                NOT EXISTS\n            src/testRelease/java                                                             NOT EXISTS\n            src/testRelease/kotlin                                                           NOT EXISTS\n\n    Kotlin sources NOT COVERED by android source sets\n        src/commonMain/kotlin                                                  (commonMain)\n        src/commonTest/kotlin                                                  (commonTest)\n\n== [Kotlin targets] ========================================================= (2)\n\n    android ----- (androidJvm platform, 5 compilations)\n\n        compilation 'debug' (target android (androidJvm)) (compiled by androidDebugClasses task)\n\n            Source sets (3)\n\n                androidDebug -----\n                    src/androidDebug/kotlin                                                          NOT EXISTS\n                    src/debug/java                                                                   NOT EXISTS\n                    src/debug/kotlin                                                                 NOT EXISTS\n\n                androidMain -----\n                    src/androidMain/kotlin\n                    src/main/java                                                                    NOT EXISTS\n                    src/main/kotlin                                                                  NOT EXISTS\n\n                commonMain -----\n                    src/commonMain/kotlin                                                            NOT EXISTS\n\n            Output\n                build/intermediates/javac/debug/compileDebugJavaWithJavac/classes\n                build/tmp/kotlin-classes/debug\n\n        compilation 'debugAndroidTest' (target android (androidJvm)) (compiled by androidDebugAndroidTestClasses task)\n\n            Source sets (2)\n\n                androidInstrumentedTestDebug -----\n                    src/androidInstrumentedTestDebug/kotlin                                          NOT EXISTS\n                    src/androidTestDebug/java                                                        NOT EXISTS\n                    src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n                androidInstrumentedTest -----\n                    src/androidInstrumentedTest/kotlin                                               NOT EXISTS\n                    src/androidTest/java                                                             NOT EXISTS\n                    src/androidTest/kotlin                                                           NOT EXISTS\n\n            Output\n                build/intermediates/javac/debugAndroidTest/compileDebugAndroidTestJavaWithJavac/classes\n                build/tmp/kotlin-classes/debugAndroidTest\n\n            Associated compilations (1)\n                debug\n\n        compilation 'debugUnitTest' (target android (androidJvm)) (compiled by androidDebugUnitTestClasses task)\n\n            Source sets (3)\n\n                androidUnitTestDebug -----\n                    src/androidUnitTestDebug/kotlin                                                  NOT EXISTS\n                    src/testDebug/java                                                               NOT EXISTS\n                    src/testDebug/kotlin                                                             NOT EXISTS\n\n                androidUnitTest -----\n                    src/androidUnitTest/kotlin                                                       NOT EXISTS\n                    src/test/java                                                                    NOT EXISTS\n                    src/test/kotlin                                                                  NOT EXISTS\n\n                commonTest -----\n                    src/commonTest/kotlin                                                            NOT EXISTS\n\n            Output\n                build/intermediates/javac/debugUnitTest/compileDebugUnitTestJavaWithJavac/classes\n                build/tmp/kotlin-classes/debugUnitTest\n\n            Associated compilations (1)\n                debug\n\n        compilation 'release' (target android (androidJvm)) (compiled by androidReleaseClasses task)\n\n            Source sets (3)\n\n                androidRelease -----\n                    src/androidRelease/kotlin                                                        NOT EXISTS\n                    src/release/java                                                                 NOT EXISTS\n                    src/release/kotlin                                                               NOT EXISTS\n\n                androidMain -----\n                    src/androidMain/kotlin\n                    src/main/java                                                                    NOT EXISTS\n                    src/main/kotlin                                                                  NOT EXISTS\n\n                commonMain -----\n                    src/commonMain/kotlin                                                            NOT EXISTS\n\n            Output\n                build/intermediates/javac/release/compileReleaseJavaWithJavac/classes\n                build/tmp/kotlin-classes/release\n\n        compilation 'releaseUnitTest' (target android (androidJvm)) (compiled by androidReleaseUnitTestClasses task)\n\n            Source sets (3)\n\n                androidUnitTestRelease -----\n                    src/androidUnitTestRelease/kotlin                                                NOT EXISTS\n                    src/testRelease/java                                                             NOT EXISTS\n                    src/testRelease/kotlin                                                           NOT EXISTS\n\n                androidUnitTest -----\n                    src/androidUnitTest/kotlin                                                       NOT EXISTS\n                    src/test/java                                                                    NOT EXISTS\n                    src/test/kotlin                                                                  NOT EXISTS\n\n                commonTest -----\n                    src/commonTest/kotlin                                                            NOT EXISTS\n\n            Output\n                build/intermediates/javac/releaseUnitTest/compileReleaseUnitTestJavaWithJavac/classes\n                build/tmp/kotlin-classes/releaseUnitTest\n\n            Associated compilations (1)\n                release\n\n    metadata ----- (common platform, 1 compilations)\n\n        compilation 'main' (target metadata (common)) (compiled by metadataMainClasses task)\n\n            Source sets (1)\n\n                commonMain -----\n                    src/commonMain/kotlin                                                            NOT EXISTS\n\n            Output\n                build/classes/kotlin/metadata/main\n\n== [Android Variants] ========================================================== (5)\n\n    debug ===== (compiled by compileDebugJavaWithJavac task)\n\n        Source sets (2)\n\n            main -----\n                src/androidMain/kotlin\n                src/main/java                                                                    NOT EXISTS\n                src/main/kotlin                                                                  NOT EXISTS\n\n            debug -----\n                src/androidDebug/kotlin                                                          NOT EXISTS\n                src/debug/java                                                                   NOT EXISTS\n                src/debug/kotlin                                                                 NOT EXISTS\n\n    release ===== (compiled by compileReleaseJavaWithJavac task)\n\n        Source sets (2)\n\n            main -----\n                src/androidMain/kotlin\n                src/main/java                                                                    NOT EXISTS\n                src/main/kotlin                                                                  NOT EXISTS\n\n            release -----\n                src/androidRelease/kotlin                                                        NOT EXISTS\n                src/release/java                                                                 NOT EXISTS\n                src/release/kotlin                                                               NOT EXISTS\n\n    debugAndroidTest ===== (compiled by compileDebugAndroidTestJavaWithJavac task)\n\n        Source sets (2)\n\n            androidTest -----\n                src/androidInstrumentedTest/kotlin                                               NOT EXISTS\n                src/androidTest/java                                                             NOT EXISTS\n                src/androidTest/kotlin                                                           NOT EXISTS\n\n            androidTestDebug -----\n                src/androidInstrumentedTestDebug/kotlin                                          NOT EXISTS\n                src/androidTestDebug/java                                                        NOT EXISTS\n                src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n    debugUnitTest ===== (compiled by compileDebugUnitTestJavaWithJavac task)\n\n        Source sets (2)\n\n            test -----\n                src/androidUnitTest/kotlin                                                       NOT EXISTS\n                src/test/java                                                                    NOT EXISTS\n                src/test/kotlin                                                                  NOT EXISTS\n\n            testDebug -----\n                src/androidUnitTestDebug/kotlin                                                  NOT EXISTS\n                src/testDebug/java                                                               NOT EXISTS\n                src/testDebug/kotlin                                                             NOT EXISTS\n\n    releaseUnitTest ===== (compiled by compileReleaseUnitTestJavaWithJavac task)\n\n        Source sets (2)\n\n            test -----\n                src/androidUnitTest/kotlin                                                       NOT EXISTS\n                src/test/java                                                                    NOT EXISTS\n                src/test/kotlin                                                                  NOT EXISTS\n\n            testRelease -----\n                src/androidUnitTestRelease/kotlin                                                NOT EXISTS\n                src/testRelease/java                                                             NOT EXISTS\n                src/testRelease/kotlin                                                           NOT EXISTS\n</code></pre></p> <p>Pay attention: <pre><code>    Android sources NOT COVERED by kotlin source sets\n        src/androidTestRelease/java                                            (androidTestRelease)\n        src/androidTestRelease/kotlin                                          (androidTestRelease)\n        src/testFixtures/java                                                  (testFixtures)\n        src/testFixtures/kotlin                                                (testFixtures)\n        src/testFixturesDebug/java                                             (testFixturesDebug)\n        src/testFixturesDebug/kotlin                                           (testFixturesDebug)\n        src/testFixturesRelease/java                                           (testFixturesRelease)\n        src/testFixturesRelease/kotlin                                         (testFixturesRelease)\n\n\n    Kotlin sources NOT COVERED by android source sets\n        src/commonMain/kotlin                                                  (commonMain)\n        src/commonTest/kotlin                                                  (commonTest)\n</code></pre></p> <p>That's why android plugin support is used for animalsniffer tasks creation - only kotlin common sources added to created tasks.</p> <p>Print animalsniffer tasks task: <pre><code>&gt; Task :printAnimalsnifferTasks\n\n\n    animalsnifferDebug                  [default]       for 'debug' android variant\n        report: build/reports/animalsniffer/debug.text\n        depends on: debugAnimalsnifferClassesCollector\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/tmp/kotlin-classes/debug\n        sources:\n            src/androidDebug/kotlin                                                          NOT EXISTS\n            src/androidMain/kotlin\n            src/commonMain/kotlin                                                            NOT EXISTS\n            src/debug/java                                                                   NOT EXISTS\n            src/debug/kotlin                                                                 NOT EXISTS\n            src/main/java                                                                    NOT EXISTS\n            src/main/kotlin                                                                  NOT EXISTS\n\n\n    animalsnifferDebugAndroidTest                       for 'debugAndroidTest' android test component\n        report: build/reports/animalsniffer/debugAndroidTest.text\n        depends on: debugAndroidTestAnimalsnifferClassesCollector\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            &lt;empty&gt;\n        sources:\n            src/androidInstrumentedTest/kotlin                                               NOT EXISTS\n            src/androidInstrumentedTestDebug/kotlin                                          NOT EXISTS\n            src/androidTest/java                                                             NOT EXISTS\n            src/androidTest/kotlin                                                           NOT EXISTS\n            src/androidTestDebug/java                                                        NOT EXISTS\n            src/androidTestDebug/kotlin                                                      NOT EXISTS\n\n\n    animalsnifferDebugUnitTest                          for 'debugUnitTest' android test component\n        report: build/reports/animalsniffer/debugUnitTest.text\n        depends on: debugUnitTestAnimalsnifferClassesCollector\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            &lt;empty&gt;\n        sources:\n            src/androidUnitTest/kotlin                                                       NOT EXISTS\n            src/androidUnitTestDebug/kotlin                                                  NOT EXISTS\n            src/commonTest/kotlin                                                            NOT EXISTS\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n            src/testDebug/java                                                               NOT EXISTS\n            src/testDebug/kotlin                                                             NOT EXISTS\n\n\n    animalsnifferRelease                [default]       for 'release' android variant\n        report: build/reports/animalsniffer/release.text\n        depends on: releaseAnimalsnifferClassesCollector\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            build/kotlinToolingMetadata\n            build/tmp/kotlin-classes/release\n        sources:\n            src/androidMain/kotlin\n            src/androidRelease/kotlin                                                        NOT EXISTS\n            src/commonMain/kotlin                                                            NOT EXISTS\n            src/main/java                                                                    NOT EXISTS\n            src/main/kotlin                                                                  NOT EXISTS\n            src/release/java                                                                 NOT EXISTS\n            src/release/kotlin                                                               NOT EXISTS\n\n\n    animalsnifferReleaseUnitTest                        for 'releaseUnitTest' android test component\n        report: build/reports/animalsniffer/releaseUnitTest.text\n        depends on: releaseUnitTestAnimalsnifferClassesCollector\n        signatures: \n            java16-sun-1.0.signature\n        classes:\n            &lt;empty&gt;\n        sources:\n            src/androidUnitTest/kotlin                                                       NOT EXISTS\n            src/androidUnitTestRelease/kotlin                                                NOT EXISTS\n            src/commonTest/kotlin                                                            NOT EXISTS\n            src/test/java                                                                    NOT EXISTS\n            src/test/kotlin                                                                  NOT EXISTS\n            src/testRelease/java                                                             NOT EXISTS\n            src/testRelease/kotlin                                                           NOT EXISTS\n</code></pre></p>"},{"location":"guide/use/multiplatform/#changing-default-tasks","title":"Changing default tasks","text":"<p>In the example 2 there are two default tasks: <code>animalsnifferJvmMain</code> and <code>animalsnifferJsMain</code>. If we want to preserve only jvmMain:</p> <pre><code>animalsniffer {\n    defaultTargets = ['jvmMain']\n}\n</code></pre> <p>or with method</p> <pre><code>animalsniffer {\n    defaultTargets 'jvmMain'\n}\n</code></pre> <p>Tip</p> <p>If you want to avoid all animalsniffer tasks: <pre><code>defaultTargets = []\n</code></pre></p>"},{"location":"guide/use/multiplatform/#test-tasks","title":"Test tasks","text":"<p>Test sources are not checked by default. If you want to check test sources:</p> <pre><code>animalsniffer {\n    checkTestSources = true\n}\n</code></pre> <p>After that <code>defaultTargets</code> option could be used to limit test tasks. </p>"}]}